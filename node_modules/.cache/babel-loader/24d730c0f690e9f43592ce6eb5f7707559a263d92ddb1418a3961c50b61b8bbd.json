{"ast":null,"code":"import _objectSpread from\"C:/_Projects/DGL_ToDo/react_todo_dashboard2/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect}from'react';import useTaskLists from'./hooks/useTaskLists';import TaskListSelector from'./components/TaskListSelector';import TaskPanel from'./components/TaskPanel';import SignInButton from'./components/SignInButton';import PreviewPanel from'./components/PreviewPanel';import'./styles.css';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const App=()=>{const{taskLists}=useTaskLists();const[selectedGroup,setSelectedGroup]=useState('Group 1');const[panelSelections,setPanelSelections]=useState(()=>{const saved=localStorage.getItem('savedGroups');const parsed=saved?JSON.parse(saved):{};return parsed[selectedGroup]||Array(6).fill('');});const[savedGroups,setSavedGroups]=useState(()=>{const saved=localStorage.getItem('savedGroups');return saved?JSON.parse(saved):{};});const[selectedTask,setSelectedTask]=useState(null);const[refreshKey,setRefreshKey]=useState(0);// Tab title\nuseEffect(()=>{document.title='✅ DGL ToDo';},[]);// Load selections when group changes\nuseEffect(()=>{if(savedGroups[selectedGroup]){setPanelSelections(savedGroups[selectedGroup]);}else{setPanelSelections(Array(6).fill(''));}},[selectedGroup,savedGroups]);const handlePanelListChange=(panelIndex,listId)=>{const updated=[...panelSelections];updated[panelIndex]=listId;setPanelSelections(updated);};const handleSaveGroup=()=>{const updatedGroups=_objectSpread(_objectSpread({},savedGroups),{},{[selectedGroup]:[...panelSelections]});setSavedGroups(updatedGroups);localStorage.setItem('savedGroups',JSON.stringify(updatedGroups));alert(\"Saved current setup to \".concat(selectedGroup));};const handleTaskTitleUpdate=(taskId,newTitle)=>{if((selectedTask===null||selectedTask===void 0?void 0:selectedTask.id)===taskId){setSelectedTask(prev=>_objectSpread(_objectSpread({},prev),{},{title:newTitle}));}setRefreshKey(prev=>prev+1);// trigger re-fetch in panels\n};return/*#__PURE__*/_jsxs(\"div\",{className:\"dashboard\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"top-bar\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"top-left\",children:/*#__PURE__*/_jsx(SignInButton,{})}),/*#__PURE__*/_jsx(\"div\",{className:\"top-center\",children:/*#__PURE__*/_jsx(\"button\",{onClick:handleSaveGroup,children:\"Save Current Setup\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"top-right\",children:/*#__PURE__*/_jsxs(\"select\",{value:selectedGroup,onChange:e=>setSelectedGroup(e.target.value),children:[/*#__PURE__*/_jsx(\"option\",{children:\"Group 1\"}),/*#__PURE__*/_jsx(\"option\",{children:\"Group 2\"}),/*#__PURE__*/_jsx(\"option\",{children:\"Group 3\"})]})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"panel-grid\",children:[...Array(6)].map((_,index)=>{const listId=panelSelections[index];const panelKey=\"\".concat(index,\"-\").concat(listId||'none',\"-\").concat(refreshKey);// remount each panel on refresh\nreturn/*#__PURE__*/_jsx(\"div\",{className:\"panel\",children:index===5?/*#__PURE__*/_jsx(PreviewPanel,{task:selectedTask,listId:selectedTask===null||selectedTask===void 0?void 0:selectedTask.parentListId,onTaskTitleUpdate:handleTaskTitleUpdate}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(TaskListSelector,{taskLists:taskLists,selectedListId:listId,onSelect:id=>handlePanelListChange(index,id)}),!listId?/*#__PURE__*/_jsx(\"p\",{style:{fontSize:'0.8rem'},children:\"Select a task list\"}):/*#__PURE__*/_jsx(TaskPanel,{listId:listId,refreshKey:refreshKey,onSelectTask:task=>setSelectedTask(_objectSpread(_objectSpread({},task),{},{parentListId:listId}))})]})},panelKey);})})]});};export default App;","map":{"version":3,"names":["React","useState","useEffect","useTaskLists","TaskListSelector","TaskPanel","SignInButton","PreviewPanel","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","App","taskLists","selectedGroup","setSelectedGroup","panelSelections","setPanelSelections","saved","localStorage","getItem","parsed","JSON","parse","Array","fill","savedGroups","setSavedGroups","selectedTask","setSelectedTask","refreshKey","setRefreshKey","document","title","handlePanelListChange","panelIndex","listId","updated","handleSaveGroup","updatedGroups","_objectSpread","setItem","stringify","alert","concat","handleTaskTitleUpdate","taskId","newTitle","id","prev","className","children","onClick","value","onChange","e","target","map","_","index","panelKey","task","parentListId","onTaskTitleUpdate","selectedListId","onSelect","style","fontSize","onSelectTask"],"sources":["C:/_Projects/DGL_ToDo/react_todo_dashboard2/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport useTaskLists from './hooks/useTaskLists';\nimport TaskListSelector from './components/TaskListSelector';\nimport TaskPanel from './components/TaskPanel';\nimport SignInButton from './components/SignInButton';\nimport PreviewPanel from './components/PreviewPanel';\nimport './styles.css';\n\nconst App = () => {\n  const { taskLists } = useTaskLists();\n  const [selectedGroup, setSelectedGroup] = useState('Group 1');\n  const [panelSelections, setPanelSelections] = useState(() => {\n    const saved = localStorage.getItem('savedGroups');\n    const parsed = saved ? JSON.parse(saved) : {};\n    return parsed[selectedGroup] || Array(6).fill('');\n  });\n  const [savedGroups, setSavedGroups] = useState(() => {\n    const saved = localStorage.getItem('savedGroups');\n    return saved ? JSON.parse(saved) : {};\n  });\n  const [selectedTask, setSelectedTask] = useState(null);\n  const [refreshKey, setRefreshKey] = useState(0);\n\n  // Tab title\n  useEffect(() => {\n    document.title = '✅ DGL ToDo';\n  }, []);\n\n  // Load selections when group changes\n  useEffect(() => {\n    if (savedGroups[selectedGroup]) {\n      setPanelSelections(savedGroups[selectedGroup]);\n    } else {\n      setPanelSelections(Array(6).fill(''));\n    }\n  }, [selectedGroup, savedGroups]);\n\n  const handlePanelListChange = (panelIndex, listId) => {\n    const updated = [...panelSelections];\n    updated[panelIndex] = listId;\n    setPanelSelections(updated);\n  };\n\n  const handleSaveGroup = () => {\n    const updatedGroups = { ...savedGroups, [selectedGroup]: [...panelSelections] };\n    setSavedGroups(updatedGroups);\n    localStorage.setItem('savedGroups', JSON.stringify(updatedGroups));\n    alert(`Saved current setup to ${selectedGroup}`);\n  };\n\n  const handleTaskTitleUpdate = (taskId, newTitle) => {\n    if (selectedTask?.id === taskId) {\n      setSelectedTask(prev => ({ ...prev, title: newTitle }));\n    }\n    setRefreshKey(prev => prev + 1); // trigger re-fetch in panels\n  };\n\n  return (\n    <div className=\"dashboard\">\n      <div className=\"top-bar\">\n        <div className=\"top-left\">\n          <SignInButton />\n        </div>\n        <div className=\"top-center\">\n          <button onClick={handleSaveGroup}>Save Current Setup</button>\n        </div>\n        <div className=\"top-right\">\n          <select value={selectedGroup} onChange={(e) => setSelectedGroup(e.target.value)}>\n            <option>Group 1</option>\n            <option>Group 2</option>\n            <option>Group 3</option>\n          </select>\n        </div>\n      </div>\n\n      <div className=\"panel-grid\">\n        {[...Array(6)].map((_, index) => {\n          const listId = panelSelections[index];\n          const panelKey = `${index}-${listId || 'none'}-${refreshKey}`; // remount each panel on refresh\n\n          return (\n            <div className=\"panel\" key={panelKey}>\n              {index === 5 ? (\n                <PreviewPanel\n                  task={selectedTask}\n                  listId={selectedTask?.parentListId}\n                  onTaskTitleUpdate={handleTaskTitleUpdate}\n                />\n              ) : (\n                <>\n                  <TaskListSelector\n                    taskLists={taskLists}\n                    selectedListId={listId}\n                    onSelect={(id) => handlePanelListChange(index, id)}\n                  />\n\n                  {!listId ? (\n                    <p style={{ fontSize: '0.8rem' }}>Select a task list</p>\n                  ) : (\n                    <TaskPanel\n                      listId={listId}\n                      refreshKey={refreshKey}\n                      onSelectTask={(task) => setSelectedTask({ ...task, parentListId: listId })}\n                    />\n                  )}\n                </>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}