{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useTaskLists.js\n\nimport { useMsal } from '@azure/msal-react';\nimport { useEffect, useState } from 'react';\nimport { InteractionRequiredAuthError } from '@azure/msal-browser';\nconst useTaskLists = () => {\n  _s();\n  const {\n    instance,\n    accounts,\n    inProgress\n  } = useMsal();\n  const [taskLists, setTaskLists] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Wait until MSAL is ready and an account is present\n    if (inProgress !== 'none' || accounts.length === 0) {\n      setLoading(true);\n      return;\n    }\n    let isMounted = true;\n    const abort = new AbortController();\n    const fetchTaskLists = async () => {\n      try {\n        var _data$value;\n        setLoading(true);\n\n        // Ensure active account exists\n        let account = instance.getActiveAccount();\n        if (!account) {\n          account = accounts[0];\n          if (account) instance.setActiveAccount(account);\n        }\n        if (!account) {\n          if (isMounted) setLoading(false);\n          return;\n        }\n        let response;\n        try {\n          response = await instance.acquireTokenSilent({\n            scopes: ['Tasks.Read'],\n            account\n          });\n        } catch (error) {\n          if (error instanceof InteractionRequiredAuthError) {\n            const loginResp = await instance.loginPopup({\n              scopes: ['Tasks.Read']\n            });\n            instance.setActiveAccount(loginResp.account);\n            response = loginResp;\n          } else {\n            throw error;\n          }\n        }\n        const res = await fetch('https://graph.microsoft.com/v1.0/me/todo/lists', {\n          method: 'GET',\n          headers: {\n            Authorization: `Bearer ${response.accessToken}`,\n            'Cache-Control': 'no-cache',\n            Pragma: 'no-cache'\n          },\n          signal: abort.signal\n        });\n        if (!res.ok) {\n          throw new Error(`Graph /lists ${res.status}`);\n        }\n        const data = await res.json();\n        if (isMounted) setTaskLists((_data$value = data === null || data === void 0 ? void 0 : data.value) !== null && _data$value !== void 0 ? _data$value : []);\n      } catch (err) {\n        if ((err === null || err === void 0 ? void 0 : err.name) === 'AbortError') return;\n        console.error('Error fetching task lists:', err);\n      } finally {\n        if (isMounted) setLoading(false);\n      }\n    };\n    fetchTaskLists();\n    return () => {\n      isMounted = false;\n      abort.abort();\n    };\n    // Re-run when MSAL readiness changes\n  }, [accounts, inProgress, instance]);\n  return {\n    taskLists,\n    loading\n  };\n};\n_s(useTaskLists, \"GIh7gJDlEtMG17kxnQzu5hk+oTU=\", false, function () {\n  return [useMsal];\n});\nexport default useTaskLists;","map":{"version":3,"names":["useMsal","useEffect","useState","InteractionRequiredAuthError","useTaskLists","_s","instance","accounts","inProgress","taskLists","setTaskLists","loading","setLoading","length","isMounted","abort","AbortController","fetchTaskLists","_data$value","account","getActiveAccount","setActiveAccount","response","acquireTokenSilent","scopes","error","loginResp","loginPopup","res","fetch","method","headers","Authorization","accessToken","Pragma","signal","ok","Error","status","data","json","value","err","name","console"],"sources":["C:/_Projects/DGL_ToDo/react_todo_dashboard2/src/hooks/useTaskLists.js"],"sourcesContent":["// src/hooks/useTaskLists.js\r\n\r\nimport { useMsal } from '@azure/msal-react';\r\nimport { useEffect, useState } from 'react';\r\nimport { InteractionRequiredAuthError } from '@azure/msal-browser';\r\n\r\nconst useTaskLists = () => {\r\n  const { instance, accounts, inProgress } = useMsal();\r\n  const [taskLists, setTaskLists] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Wait until MSAL is ready and an account is present\r\n    if (inProgress !== 'none' || accounts.length === 0) {\r\n      setLoading(true);\r\n      return;\r\n    }\r\n\r\n    let isMounted = true;\r\n    const abort = new AbortController();\r\n\r\n    const fetchTaskLists = async () => {\r\n      try {\r\n        setLoading(true);\r\n\r\n        // Ensure active account exists\r\n        let account = instance.getActiveAccount();\r\n        if (!account) {\r\n          account = accounts[0];\r\n          if (account) instance.setActiveAccount(account);\r\n        }\r\n        if (!account) {\r\n          if (isMounted) setLoading(false);\r\n          return;\r\n        }\r\n\r\n        let response;\r\n        try {\r\n          response = await instance.acquireTokenSilent({\r\n            scopes: ['Tasks.Read'],\r\n            account,\r\n          });\r\n        } catch (error) {\r\n          if (error instanceof InteractionRequiredAuthError) {\r\n            const loginResp = await instance.loginPopup({ scopes: ['Tasks.Read'] });\r\n            instance.setActiveAccount(loginResp.account);\r\n            response = loginResp;\r\n          } else {\r\n            throw error;\r\n          }\r\n        }\r\n\r\n        const res = await fetch('https://graph.microsoft.com/v1.0/me/todo/lists', {\r\n          method: 'GET',\r\n          headers: {\r\n            Authorization: `Bearer ${response.accessToken}`,\r\n            'Cache-Control': 'no-cache',\r\n            Pragma: 'no-cache',\r\n          },\r\n          signal: abort.signal,\r\n        });\r\n\r\n        if (!res.ok) {\r\n          throw new Error(`Graph /lists ${res.status}`);\r\n        }\r\n\r\n        const data = await res.json();\r\n        if (isMounted) setTaskLists(data?.value ?? []);\r\n      } catch (err) {\r\n        if (err?.name === 'AbortError') return;\r\n        console.error('Error fetching task lists:', err);\r\n      } finally {\r\n        if (isMounted) setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchTaskLists();\r\n\r\n    return () => {\r\n      isMounted = false;\r\n      abort.abort();\r\n    };\r\n    // Re-run when MSAL readiness changes\r\n  }, [accounts, inProgress, instance]);\r\n\r\n  return { taskLists, loading };\r\n};\r\n\r\nexport default useTaskLists;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}