{"ast":null,"code":"/*! @azure/msal-browser v4.24.1 2025-09-30 */\n'use strict';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Returns all the accounts in the cache that match the optional filter. If no filter is provided, all accounts are returned.\r\n * @param accountFilter - (Optional) filter to narrow down the accounts returned\r\n * @returns Array of AccountInfo objects in cache\r\n */\nfunction getAllAccounts(logger, browserStorage, isInBrowser, correlationId, accountFilter) {\n  logger.verbose(\"getAllAccounts called\");\n  return isInBrowser ? browserStorage.getAllAccounts(accountFilter || {}, correlationId) : [];\n}\n/**\r\n * Returns the first account found in the cache that matches the account filter passed in.\r\n * @param accountFilter\r\n * @returns The first account found in the cache matching the provided filter or null if no account could be found.\r\n */\nfunction getAccount(accountFilter, logger, browserStorage, correlationId) {\n  const account = browserStorage.getAccountInfoFilteredBy(accountFilter, correlationId);\n  if (account) {\n    logger.verbose(\"getAccount: Account matching provided filter found, returning\");\n    return account;\n  } else {\n    logger.verbose(\"getAccount: No matching account found, returning null\");\n    return null;\n  }\n}\n/**\r\n * Returns the signed in account matching username.\r\n * (the account object is created at the time of successful login)\r\n * or null when no matching account is found.\r\n * This API is provided for convenience but getAccountById should be used for best reliability\r\n * @param username\r\n * @returns The account object stored in MSAL\r\n */\nfunction getAccountByUsername(username, logger, browserStorage, correlationId) {\n  logger.trace(\"getAccountByUsername called\");\n  if (!username) {\n    logger.warning(\"getAccountByUsername: No username provided\");\n    return null;\n  }\n  const account = browserStorage.getAccountInfoFilteredBy({\n    username\n  }, correlationId);\n  if (account) {\n    logger.verbose(\"getAccountByUsername: Account matching username found, returning\");\n    logger.verbosePii(`getAccountByUsername: Returning signed-in accounts matching username: ${username}`);\n    return account;\n  } else {\n    logger.verbose(\"getAccountByUsername: No matching account found, returning null\");\n    return null;\n  }\n}\n/**\r\n * Returns the signed in account matching homeAccountId.\r\n * (the account object is created at the time of successful login)\r\n * or null when no matching account is found\r\n * @param homeAccountId\r\n * @returns The account object stored in MSAL\r\n */\nfunction getAccountByHomeId(homeAccountId, logger, browserStorage, correlationId) {\n  logger.trace(\"getAccountByHomeId called\");\n  if (!homeAccountId) {\n    logger.warning(\"getAccountByHomeId: No homeAccountId provided\");\n    return null;\n  }\n  const account = browserStorage.getAccountInfoFilteredBy({\n    homeAccountId\n  }, correlationId);\n  if (account) {\n    logger.verbose(\"getAccountByHomeId: Account matching homeAccountId found, returning\");\n    logger.verbosePii(`getAccountByHomeId: Returning signed-in accounts matching homeAccountId: ${homeAccountId}`);\n    return account;\n  } else {\n    logger.verbose(\"getAccountByHomeId: No matching account found, returning null\");\n    return null;\n  }\n}\n/**\r\n * Returns the signed in account matching localAccountId.\r\n * (the account object is created at the time of successful login)\r\n * or null when no matching account is found\r\n * @param localAccountId\r\n * @returns The account object stored in MSAL\r\n */\nfunction getAccountByLocalId(localAccountId, logger, browserStorage, correlationId) {\n  logger.trace(\"getAccountByLocalId called\");\n  if (!localAccountId) {\n    logger.warning(\"getAccountByLocalId: No localAccountId provided\");\n    return null;\n  }\n  const account = browserStorage.getAccountInfoFilteredBy({\n    localAccountId\n  }, correlationId);\n  if (account) {\n    logger.verbose(\"getAccountByLocalId: Account matching localAccountId found, returning\");\n    logger.verbosePii(`getAccountByLocalId: Returning signed-in accounts matching localAccountId: ${localAccountId}`);\n    return account;\n  } else {\n    logger.verbose(\"getAccountByLocalId: No matching account found, returning null\");\n    return null;\n  }\n}\n/**\r\n * Sets the account to use as the active account. If no account is passed to the acquireToken APIs, then MSAL will use this active account.\r\n * @param account\r\n */\nfunction setActiveAccount(account, browserStorage, correlationId) {\n  browserStorage.setActiveAccount(account, correlationId);\n}\n/**\r\n * Gets the currently active account\r\n */\nfunction getActiveAccount(browserStorage, correlationId) {\n  return browserStorage.getActiveAccount(correlationId);\n}\nexport { getAccount, getAccountByHomeId, getAccountByLocalId, getAccountByUsername, getActiveAccount, getAllAccounts, setActiveAccount };","map":{"version":3,"names":["getAllAccounts","logger","browserStorage","isInBrowser","correlationId","accountFilter","verbose","getAccount","account","getAccountInfoFilteredBy","getAccountByUsername","username","trace","warning","verbosePii","getAccountByHomeId","homeAccountId","getAccountByLocalId","localAccountId","setActiveAccount","getActiveAccount"],"sources":["C:\\_Projects\\DGL_ToDo\\react_todo_dashboard2\\node_modules\\@azure\\msal-browser\\src\\cache\\AccountManager.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AccountInfo, AccountFilter, Logger } from \"@azure/msal-common/browser\";\nimport { BrowserCacheManager } from \"./BrowserCacheManager.js\";\n\n/**\n * Returns all the accounts in the cache that match the optional filter. If no filter is provided, all accounts are returned.\n * @param accountFilter - (Optional) filter to narrow down the accounts returned\n * @returns Array of AccountInfo objects in cache\n */\nexport function getAllAccounts(\n    logger: Logger,\n    browserStorage: BrowserCacheManager,\n    isInBrowser: boolean,\n    correlationId: string,\n    accountFilter?: AccountFilter\n): AccountInfo[] {\n    logger.verbose(\"getAllAccounts called\");\n    return isInBrowser\n        ? browserStorage.getAllAccounts(accountFilter || {}, correlationId)\n        : [];\n}\n\n/**\n * Returns the first account found in the cache that matches the account filter passed in.\n * @param accountFilter\n * @returns The first account found in the cache matching the provided filter or null if no account could be found.\n */\nexport function getAccount(\n    accountFilter: AccountFilter,\n    logger: Logger,\n    browserStorage: BrowserCacheManager,\n    correlationId: string\n): AccountInfo | null {\n    const account: AccountInfo | null = browserStorage.getAccountInfoFilteredBy(\n        accountFilter,\n        correlationId\n    );\n\n    if (account) {\n        logger.verbose(\n            \"getAccount: Account matching provided filter found, returning\"\n        );\n        return account;\n    } else {\n        logger.verbose(\"getAccount: No matching account found, returning null\");\n        return null;\n    }\n}\n\n/**\n * Returns the signed in account matching username.\n * (the account object is created at the time of successful login)\n * or null when no matching account is found.\n * This API is provided for convenience but getAccountById should be used for best reliability\n * @param username\n * @returns The account object stored in MSAL\n */\nexport function getAccountByUsername(\n    username: string,\n    logger: Logger,\n    browserStorage: BrowserCacheManager,\n    correlationId: string\n): AccountInfo | null {\n    logger.trace(\"getAccountByUsername called\");\n    if (!username) {\n        logger.warning(\"getAccountByUsername: No username provided\");\n        return null;\n    }\n\n    const account = browserStorage.getAccountInfoFilteredBy(\n        {\n            username,\n        },\n        correlationId\n    );\n    if (account) {\n        logger.verbose(\n            \"getAccountByUsername: Account matching username found, returning\"\n        );\n        logger.verbosePii(\n            `getAccountByUsername: Returning signed-in accounts matching username: ${username}`\n        );\n        return account;\n    } else {\n        logger.verbose(\n            \"getAccountByUsername: No matching account found, returning null\"\n        );\n        return null;\n    }\n}\n\n/**\n * Returns the signed in account matching homeAccountId.\n * (the account object is created at the time of successful login)\n * or null when no matching account is found\n * @param homeAccountId\n * @returns The account object stored in MSAL\n */\nexport function getAccountByHomeId(\n    homeAccountId: string,\n    logger: Logger,\n    browserStorage: BrowserCacheManager,\n    correlationId: string\n): AccountInfo | null {\n    logger.trace(\"getAccountByHomeId called\");\n    if (!homeAccountId) {\n        logger.warning(\"getAccountByHomeId: No homeAccountId provided\");\n        return null;\n    }\n\n    const account = browserStorage.getAccountInfoFilteredBy(\n        {\n            homeAccountId,\n        },\n        correlationId\n    );\n    if (account) {\n        logger.verbose(\n            \"getAccountByHomeId: Account matching homeAccountId found, returning\"\n        );\n        logger.verbosePii(\n            `getAccountByHomeId: Returning signed-in accounts matching homeAccountId: ${homeAccountId}`\n        );\n        return account;\n    } else {\n        logger.verbose(\n            \"getAccountByHomeId: No matching account found, returning null\"\n        );\n        return null;\n    }\n}\n\n/**\n * Returns the signed in account matching localAccountId.\n * (the account object is created at the time of successful login)\n * or null when no matching account is found\n * @param localAccountId\n * @returns The account object stored in MSAL\n */\nexport function getAccountByLocalId(\n    localAccountId: string,\n    logger: Logger,\n    browserStorage: BrowserCacheManager,\n    correlationId: string\n): AccountInfo | null {\n    logger.trace(\"getAccountByLocalId called\");\n    if (!localAccountId) {\n        logger.warning(\"getAccountByLocalId: No localAccountId provided\");\n        return null;\n    }\n\n    const account = browserStorage.getAccountInfoFilteredBy(\n        {\n            localAccountId,\n        },\n        correlationId\n    );\n    if (account) {\n        logger.verbose(\n            \"getAccountByLocalId: Account matching localAccountId found, returning\"\n        );\n        logger.verbosePii(\n            `getAccountByLocalId: Returning signed-in accounts matching localAccountId: ${localAccountId}`\n        );\n        return account;\n    } else {\n        logger.verbose(\n            \"getAccountByLocalId: No matching account found, returning null\"\n        );\n        return null;\n    }\n}\n\n/**\n * Sets the account to use as the active account. If no account is passed to the acquireToken APIs, then MSAL will use this active account.\n * @param account\n */\nexport function setActiveAccount(\n    account: AccountInfo | null,\n    browserStorage: BrowserCacheManager,\n    correlationId: string\n): void {\n    browserStorage.setActiveAccount(account, correlationId);\n}\n\n/**\n * Gets the currently active account\n */\nexport function getActiveAccount(\n    browserStorage: BrowserCacheManager,\n    correlationId: string\n): AccountInfo | null {\n    return browserStorage.getActiveAccount(correlationId);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}