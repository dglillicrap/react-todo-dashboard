{"ast":null,"code":"/*! @azure/msal-browser v4.24.1 2025-09-30 */\n'use strict';\n\nimport { getAccountKeysCacheKey, getTokenKeysCacheKey } from './CacheKeys.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Returns a list of cache keys for all known accounts\r\n * @param storage\r\n * @returns\r\n */\nfunction getAccountKeys(storage, schemaVersion) {\n  const accountKeys = storage.getItem(getAccountKeysCacheKey(schemaVersion));\n  if (accountKeys) {\n    return JSON.parse(accountKeys);\n  }\n  return [];\n}\n/**\r\n * Returns a list of cache keys for all known tokens\r\n * @param clientId\r\n * @param storage\r\n * @returns\r\n */\nfunction getTokenKeys(clientId, storage, schemaVersion) {\n  const item = storage.getItem(getTokenKeysCacheKey(clientId, schemaVersion));\n  if (item) {\n    const tokenKeys = JSON.parse(item);\n    if (tokenKeys && tokenKeys.hasOwnProperty(\"idToken\") && tokenKeys.hasOwnProperty(\"accessToken\") && tokenKeys.hasOwnProperty(\"refreshToken\")) {\n      return tokenKeys;\n    }\n  }\n  return {\n    idToken: [],\n    accessToken: [],\n    refreshToken: []\n  };\n}\nexport { getAccountKeys, getTokenKeys };","map":{"version":3,"names":["getAccountKeys","storage","schemaVersion","accountKeys","getItem","getAccountKeysCacheKey","JSON","parse","getTokenKeys","clientId","item","getTokenKeysCacheKey","tokenKeys","hasOwnProperty","idToken","accessToken","refreshToken"],"sources":["C:\\_Projects\\DGL_ToDo\\react_todo_dashboard2\\node_modules\\@azure\\msal-browser\\src\\cache\\CacheHelpers.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { TokenKeys } from \"@azure/msal-common/browser\";\nimport { IWindowStorage } from \"./IWindowStorage.js\";\nimport * as CacheKeys from \"./CacheKeys.js\";\n\n/**\n * Returns a list of cache keys for all known accounts\n * @param storage\n * @returns\n */\nexport function getAccountKeys(\n    storage: IWindowStorage<string>,\n    schemaVersion?: number\n): Array<string> {\n    const accountKeys = storage.getItem(\n        CacheKeys.getAccountKeysCacheKey(schemaVersion)\n    );\n    if (accountKeys) {\n        return JSON.parse(accountKeys);\n    }\n\n    return [];\n}\n\n/**\n * Returns a list of cache keys for all known tokens\n * @param clientId\n * @param storage\n * @returns\n */\nexport function getTokenKeys(\n    clientId: string,\n    storage: IWindowStorage<string>,\n    schemaVersion?: number\n): TokenKeys {\n    const item = storage.getItem(\n        CacheKeys.getTokenKeysCacheKey(clientId, schemaVersion)\n    );\n    if (item) {\n        const tokenKeys = JSON.parse(item);\n        if (\n            tokenKeys &&\n            tokenKeys.hasOwnProperty(\"idToken\") &&\n            tokenKeys.hasOwnProperty(\"accessToken\") &&\n            tokenKeys.hasOwnProperty(\"refreshToken\")\n        ) {\n            return tokenKeys as TokenKeys;\n        }\n    }\n\n    return {\n        idToken: [],\n        accessToken: [],\n        refreshToken: [],\n    };\n}\n"],"mappings":";;;;;AAAA;;;AAGG;AAMH;;;;AAIG;AACa,SAAAA,cAAcA,CAC1BC,OAA+B,EAC/BC,aAAsB;EAEtB,MAAMC,WAAW,GAAGF,OAAO,CAACG,OAAO,CAC/BC,sBAAgC,CAACH,aAAa,CAAC,CAClD;EACD,IAAIC,WAAW,EAAE;IACb,OAAOG,IAAI,CAACC,KAAK,CAACJ,WAAW,CAAC;EACjC;EAED,OAAO,EAAE;AACb;AAEA;;;;;AAKG;SACaK,YAAYA,CACxBC,QAAgB,EAChBR,OAA+B,EAC/BC,aAAsB;EAEtB,MAAMQ,IAAI,GAAGT,OAAO,CAACG,OAAO,CACxBO,oBAA8B,CAACF,QAAQ,EAAEP,aAAa,CAAC,CAC1D;EACD,IAAIQ,IAAI,EAAE;IACN,MAAME,SAAS,GAAGN,IAAI,CAACC,KAAK,CAACG,IAAI,CAAC;IAClC,IACIE,SAAS,IACTA,SAAS,CAACC,cAAc,CAAC,SAAS,CAAC,IACnCD,SAAS,CAACC,cAAc,CAAC,aAAa,CAAC,IACvCD,SAAS,CAACC,cAAc,CAAC,cAAc,CAAC,EAC1C;MACE,OAAOD,SAAsB;IAChC;EACJ;EAED,OAAO;IACHE,OAAO,EAAE,EAAE;IACXC,WAAW,EAAE,EAAE;IACfC,YAAY,EAAE;GACjB;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}