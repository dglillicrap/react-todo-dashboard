{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useTaskLists.js\nimport { useMsal } from '@azure/msal-react';\nimport { useEffect, useState } from 'react';\nimport { InteractionRequiredAuthError } from '@azure/msal-browser';\nconst useTaskLists = () => {\n  _s();\n  const {\n    instance\n  } = useMsal();\n  const [taskLists, setTaskLists] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchTaskLists = async () => {\n      try {\n        const account = instance.getActiveAccount();\n        if (!account) {\n          console.warn('No active account. User may not be signed in.');\n          setLoading(false);\n          return;\n        }\n        const response = await instance.acquireTokenSilent({\n          scopes: ['Tasks.Read'],\n          account\n        });\n        const res = await fetch('https://graph.microsoft.com/v1.0/me/todo/lists', {\n          headers: {\n            Authorization: `Bearer ${response.accessToken}`\n          }\n        });\n        const data = await res.json();\n        setTaskLists(data.value || []);\n      } catch (error) {\n        if (error instanceof InteractionRequiredAuthError) {\n          console.warn('Interaction required. Please sign in again.');\n        } else {\n          console.error('Error fetching task lists:', error);\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    // Only run if MSAL is initialized\n    if (instance && instance.getAllAccounts().length > 0) {\n      fetchTaskLists();\n    } else {\n      console.warn('MSAL instance not ready or no accounts found.');\n      setLoading(false);\n    }\n  }, [instance]);\n  return {\n    taskLists,\n    loading\n  };\n};\n_s(useTaskLists, \"9ijF90vO0fH6F0RjAq8brL+y9/c=\", false, function () {\n  return [useMsal];\n});\nexport default useTaskLists;","map":{"version":3,"names":["useMsal","useEffect","useState","InteractionRequiredAuthError","useTaskLists","_s","instance","taskLists","setTaskLists","loading","setLoading","fetchTaskLists","account","getActiveAccount","console","warn","response","acquireTokenSilent","scopes","res","fetch","headers","Authorization","accessToken","data","json","value","error","getAllAccounts","length"],"sources":["C:/_Projects/DGL_ToDo/react_todo_dashboard2/src/hooks/useTaskLists.js"],"sourcesContent":["// src/hooks/useTaskLists.js\r\nimport { useMsal } from '@azure/msal-react';\r\nimport { useEffect, useState } from 'react';\r\nimport { InteractionRequiredAuthError } from '@azure/msal-browser';\r\n\r\nconst useTaskLists = () => {\r\n  const { instance } = useMsal();\r\n  const [taskLists, setTaskLists] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchTaskLists = async () => {\r\n      try {\r\n        const account = instance.getActiveAccount();\r\n        if (!account) {\r\n          console.warn('No active account. User may not be signed in.');\r\n          setLoading(false);\r\n          return;\r\n        }\r\n\r\n        const response = await instance.acquireTokenSilent({\r\n          scopes: ['Tasks.Read'],\r\n          account,\r\n        });\r\n\r\n        const res = await fetch('https://graph.microsoft.com/v1.0/me/todo/lists', {\r\n          headers: {\r\n            Authorization: `Bearer ${response.accessToken}`,\r\n          },\r\n        });\r\n\r\n        const data = await res.json();\r\n        setTaskLists(data.value || []);\r\n      } catch (error) {\r\n        if (error instanceof InteractionRequiredAuthError) {\r\n          console.warn('Interaction required. Please sign in again.');\r\n        } else {\r\n          console.error('Error fetching task lists:', error);\r\n        }\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    // Only run if MSAL is initialized\r\n    if (instance && instance.getAllAccounts().length > 0) {\r\n      fetchTaskLists();\r\n    } else {\r\n      console.warn('MSAL instance not ready or no accounts found.');\r\n      setLoading(false);\r\n    }\r\n  }, [instance]);\r\n\r\n  return { taskLists, loading };\r\n};\r\n\r\nexport default useTaskLists;"],"mappings":";AAAA;AACA,SAASA,OAAO,QAAQ,mBAAmB;AAC3C,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,4BAA4B,QAAQ,qBAAqB;AAElE,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM;IAAEC;EAAS,CAAC,GAAGN,OAAO,CAAC,CAAC;EAC9B,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACd,MAAMU,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF,MAAMC,OAAO,GAAGN,QAAQ,CAACO,gBAAgB,CAAC,CAAC;QAC3C,IAAI,CAACD,OAAO,EAAE;UACZE,OAAO,CAACC,IAAI,CAAC,+CAA+C,CAAC;UAC7DL,UAAU,CAAC,KAAK,CAAC;UACjB;QACF;QAEA,MAAMM,QAAQ,GAAG,MAAMV,QAAQ,CAACW,kBAAkB,CAAC;UACjDC,MAAM,EAAE,CAAC,YAAY,CAAC;UACtBN;QACF,CAAC,CAAC;QAEF,MAAMO,GAAG,GAAG,MAAMC,KAAK,CAAC,gDAAgD,EAAE;UACxEC,OAAO,EAAE;YACPC,aAAa,EAAE,UAAUN,QAAQ,CAACO,WAAW;UAC/C;QACF,CAAC,CAAC;QAEF,MAAMC,IAAI,GAAG,MAAML,GAAG,CAACM,IAAI,CAAC,CAAC;QAC7BjB,YAAY,CAACgB,IAAI,CAACE,KAAK,IAAI,EAAE,CAAC;MAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACd,IAAIA,KAAK,YAAYxB,4BAA4B,EAAE;UACjDW,OAAO,CAACC,IAAI,CAAC,6CAA6C,CAAC;QAC7D,CAAC,MAAM;UACLD,OAAO,CAACa,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QACpD;MACF,CAAC,SAAS;QACRjB,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;;IAED;IACA,IAAIJ,QAAQ,IAAIA,QAAQ,CAACsB,cAAc,CAAC,CAAC,CAACC,MAAM,GAAG,CAAC,EAAE;MACpDlB,cAAc,CAAC,CAAC;IAClB,CAAC,MAAM;MACLG,OAAO,CAACC,IAAI,CAAC,+CAA+C,CAAC;MAC7DL,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,CAACJ,QAAQ,CAAC,CAAC;EAEd,OAAO;IAAEC,SAAS;IAAEE;EAAQ,CAAC;AAC/B,CAAC;AAACJ,EAAA,CAjDID,YAAY;EAAA,QACKJ,OAAO;AAAA;AAkD9B,eAAeI,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}