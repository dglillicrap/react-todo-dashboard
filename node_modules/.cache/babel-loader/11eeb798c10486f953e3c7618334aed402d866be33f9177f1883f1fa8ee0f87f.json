{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useTaskLists.js\nimport { useMsal } from '@azure/msal-react';\nimport { useEffect, useState } from 'react';\nimport { InteractionRequiredAuthError } from '@azure/msal-browser';\nconst sleep = ms => new Promise(r => setTimeout(r, ms));\nconst useTaskLists = () => {\n  _s();\n  const {\n    instance,\n    accounts,\n    inProgress\n  } = useMsal();\n  const [taskLists, setTaskLists] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Wait for MSAL readiness\n    if (inProgress !== 'none' || accounts.length === 0) {\n      setLoading(true);\n      return;\n    }\n    let isMounted = true;\n    const abort = new AbortController();\n    const getToken = async () => {\n      let account = instance.getActiveAccount() || accounts[0];\n      if (!account) return null;\n      if (!instance.getActiveAccount()) instance.setActiveAccount(account);\n      try {\n        return await instance.acquireTokenSilent({\n          scopes: ['Tasks.Read'],\n          account\n        });\n      } catch (e) {\n        if (e instanceof InteractionRequiredAuthError) {\n          try {\n            const loginResp = await instance.loginPopup({\n              scopes: ['Tasks.Read']\n            });\n            instance.setActiveAccount(loginResp.account);\n            return loginResp;\n          } catch (e2) {\n            console.error('loginPopup failed:', e2);\n            return null;\n          }\n        }\n        // Retry once with forceRefresh\n        try {\n          return await instance.acquireTokenSilent({\n            scopes: ['Tasks.Read'],\n            account,\n            forceRefresh: true\n          });\n        } catch (e3) {\n          console.error('acquireTokenSilent failed (forceRefresh):', e3);\n          return null;\n        }\n      }\n    };\n    const fetchListsWithRetry = async () => {\n      setLoading(true);\n      let tokenResp = await getToken();\n      if (!tokenResp) {\n        if (isMounted) setLoading(false);\n        return;\n      }\n      const url = 'https://graph.microsoft.com/v1.0/me/todo/lists';\n      let attempt = 0;\n      while (attempt < 3 && isMounted) {\n        try {\n          const res = await fetch(url, {\n            method: 'GET',\n            headers: {\n              Authorization: `Bearer ${tokenResp.accessToken}`,\n              'Cache-Control': 'no-cache',\n              Pragma: 'no-cache'\n            },\n            signal: abort.signal\n          });\n          if (res.ok) {\n            var _data$value;\n            const data = await res.json();\n            if (isMounted) setTaskLists((_data$value = data === null || data === void 0 ? void 0 : data.value) !== null && _data$value !== void 0 ? _data$value : []);\n            break;\n          }\n          if (res.status === 401 || res.status === 403) {\n            tokenResp = await getToken(); // refresh token/login if needed\n            if (!tokenResp) throw new Error(`Auth failed (${res.status})`);\n          } else if (res.status === 429 || res.status >= 500) {\n            await sleep(300 * Math.pow(3, attempt));\n          } else {\n            const text = await res.text();\n            console.error('Graph /lists error', res.status, text);\n            break;\n          }\n        } catch (err) {\n          if ((err === null || err === void 0 ? void 0 : err.name) === 'AbortError') break;\n          await sleep(300 * Math.pow(3, attempt));\n        }\n        attempt += 1;\n      }\n      if (isMounted) setLoading(false);\n    };\n    fetchListsWithRetry();\n    return () => {\n      isMounted = false;\n      abort.abort();\n    };\n  }, [accounts, inProgress, instance]);\n  return {\n    taskLists,\n    loading\n  };\n};\n_s(useTaskLists, \"GIh7gJDlEtMG17kxnQzu5hk+oTU=\", false, function () {\n  return [useMsal];\n});\nexport default useTaskLists;","map":{"version":3,"names":["useMsal","useEffect","useState","InteractionRequiredAuthError","sleep","ms","Promise","r","setTimeout","useTaskLists","_s","instance","accounts","inProgress","taskLists","setTaskLists","loading","setLoading","length","isMounted","abort","AbortController","getToken","account","getActiveAccount","setActiveAccount","acquireTokenSilent","scopes","e","loginResp","loginPopup","e2","console","error","forceRefresh","e3","fetchListsWithRetry","tokenResp","url","attempt","res","fetch","method","headers","Authorization","accessToken","Pragma","signal","ok","_data$value","data","json","value","status","Error","Math","pow","text","err","name"],"sources":["C:/_Projects/DGL_ToDo/react_todo_dashboard2/src/hooks/useTaskLists.js"],"sourcesContent":["// src/hooks/useTaskLists.js\r\nimport { useMsal } from '@azure/msal-react';\r\nimport { useEffect, useState } from 'react';\r\nimport { InteractionRequiredAuthError } from '@azure/msal-browser';\r\n\r\nconst sleep = (ms) => new Promise((r) => setTimeout(r, ms));\r\n\r\nconst useTaskLists = () => {\r\n  const { instance, accounts, inProgress } = useMsal();\r\n  const [taskLists, setTaskLists] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Wait for MSAL readiness\r\n    if (inProgress !== 'none' || accounts.length === 0) {\r\n      setLoading(true);\r\n      return;\r\n    }\r\n\r\n    let isMounted = true;\r\n    const abort = new AbortController();\r\n\r\n    const getToken = async () => {\r\n      let account = instance.getActiveAccount() || accounts[0];\r\n      if (!account) return null;\r\n      if (!instance.getActiveAccount()) instance.setActiveAccount(account);\r\n\r\n      try {\r\n        return await instance.acquireTokenSilent({\r\n          scopes: ['Tasks.Read'],\r\n          account,\r\n        });\r\n      } catch (e) {\r\n        if (e instanceof InteractionRequiredAuthError) {\r\n          try {\r\n            const loginResp = await instance.loginPopup({ scopes: ['Tasks.Read'] });\r\n            instance.setActiveAccount(loginResp.account);\r\n            return loginResp;\r\n          } catch (e2) {\r\n            console.error('loginPopup failed:', e2);\r\n            return null;\r\n          }\r\n        }\r\n        // Retry once with forceRefresh\r\n        try {\r\n          return await instance.acquireTokenSilent({\r\n            scopes: ['Tasks.Read'],\r\n            account,\r\n            forceRefresh: true,\r\n          });\r\n        } catch (e3) {\r\n          console.error('acquireTokenSilent failed (forceRefresh):', e3);\r\n          return null;\r\n        }\r\n      }\r\n    };\r\n\r\n    const fetchListsWithRetry = async () => {\r\n      setLoading(true);\r\n\r\n      let tokenResp = await getToken();\r\n      if (!tokenResp) {\r\n        if (isMounted) setLoading(false);\r\n        return;\r\n      }\r\n\r\n      const url = 'https://graph.microsoft.com/v1.0/me/todo/lists';\r\n      let attempt = 0;\r\n\r\n      while (attempt < 3 && isMounted) {\r\n        try {\r\n          const res = await fetch(url, {\r\n            method: 'GET',\r\n            headers: {\r\n              Authorization: `Bearer ${tokenResp.accessToken}`,\r\n              'Cache-Control': 'no-cache',\r\n              Pragma: 'no-cache',\r\n            },\r\n            signal: abort.signal,\r\n          });\r\n\r\n          if (res.ok) {\r\n            const data = await res.json();\r\n            if (isMounted) setTaskLists(data?.value ?? []);\r\n            break;\r\n          }\r\n\r\n          if (res.status === 401 || res.status === 403) {\r\n            tokenResp = await getToken(); // refresh token/login if needed\r\n            if (!tokenResp) throw new Error(`Auth failed (${res.status})`);\r\n          } else if (res.status === 429 || res.status >= 500) {\r\n            await sleep(300 * Math.pow(3, attempt));\r\n          } else {\r\n            const text = await res.text();\r\n            console.error('Graph /lists error', res.status, text);\r\n            break;\r\n          }\r\n        } catch (err) {\r\n          if (err?.name === 'AbortError') break;\r\n          await sleep(300 * Math.pow(3, attempt));\r\n        }\r\n        attempt += 1;\r\n      }\r\n\r\n      if (isMounted) setLoading(false);\r\n    };\r\n\r\n    fetchListsWithRetry();\r\n\r\n    return () => {\r\n      isMounted = false;\r\n      abort.abort();\r\n    };\r\n  }, [accounts, inProgress, instance]);\r\n\r\n  return { taskLists, loading };\r\n};\r\n\r\nexport default useTaskLists;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}