{"ast":null,"code":"var _jsxFileName = \"C:\\\\_Projects\\\\DGL_ToDo\\\\react_todo_dashboard2\\\\src\\\\components\\\\PreviewPanel.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PreviewPanel({\n  task\n}) {\n  _s();\n  const [steps, setSteps] = useState((task === null || task === void 0 ? void 0 : task.steps) || []);\n  const [newStep, setNewStep] = useState('');\n  const handleAddStep = () => {\n    if (newStep.trim()) {\n      setSteps([...steps, {\n        title: newStep,\n        done: false\n      }]);\n      setNewStep('');\n    }\n  };\n  const toggleStep = index => {\n    const updated = [...steps];\n    updated[index].done = !updated[index].done;\n    setSteps(updated);\n  };\n  if (!task) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"panel preview\",\n    children: \"Select a task to preview\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"panel preview\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: task.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: steps.map((step, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: step.done,\n          onChange: () => toggleStep(idx)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 13\n        }, this), step.title]\n      }, idx, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Add step...\",\n      value: newStep,\n      onChange: e => setNewStep(e.target.value),\n      onKeyDown: e => e.key === 'Enter' && handleAddStep()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}\n_s(PreviewPanel, \"ojSgt5mdshhENUw9IK/vMrqMQYg=\");\n_c = PreviewPanel;\nvar _c;\n$RefreshReg$(_c, \"PreviewPanel\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","PreviewPanel","task","_s","steps","setSteps","newStep","setNewStep","handleAddStep","trim","title","done","toggleStep","index","updated","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","step","idx","type","checked","onChange","placeholder","value","e","target","onKeyDown","key","_c","$RefreshReg$"],"sources":["C:/_Projects/DGL_ToDo/react_todo_dashboard2/src/components/PreviewPanel.jsx"],"sourcesContent":["import React, { useState } from 'react';\n\nexport default function PreviewPanel({ task }) {\n  const [steps, setSteps] = useState(task?.steps || []);\n  const [newStep, setNewStep] = useState('');\n\n  const handleAddStep = () => {\n    if (newStep.trim()) {\n      setSteps([...steps, { title: newStep, done: false }]);\n      setNewStep('');\n    }\n  };\n\n  const toggleStep = (index) => {\n    const updated = [...steps];\n    updated[index].done = !updated[index].done;\n    setSteps(updated);\n  };\n\n  if (!task) return <div className=\"panel preview\">Select a task to preview</div>;\n\n  return (\n    <div className=\"panel preview\">\n      <h3>{task.title}</h3>\n      <ul>\n        {steps.map((step, idx) => (\n          <li key={idx}>\n            <input\n              type=\"checkbox\"\n              checked={step.done}\n              onChange={() => toggleStep(idx)}\n            />\n            {step.title}\n          </li>\n        ))}\n      </ul>\n      <input\n        type=\"text\"\n        placeholder=\"Add step...\"\n        value={newStep}\n        onChange={(e) => setNewStep(e.target.value)}\n        onKeyDown={(e) => e.key === 'Enter' && handleAddStep()}\n      />\n    </div>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,eAAe,SAASC,YAAYA,CAAC;EAAEC;AAAK,CAAC,EAAE;EAAAC,EAAA;EAC7C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,CAAAI,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEE,KAAK,KAAI,EAAE,CAAC;EACrD,MAAM,CAACE,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE1C,MAAMU,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAIF,OAAO,CAACG,IAAI,CAAC,CAAC,EAAE;MAClBJ,QAAQ,CAAC,CAAC,GAAGD,KAAK,EAAE;QAAEM,KAAK,EAAEJ,OAAO;QAAEK,IAAI,EAAE;MAAM,CAAC,CAAC,CAAC;MACrDJ,UAAU,CAAC,EAAE,CAAC;IAChB;EACF,CAAC;EAED,MAAMK,UAAU,GAAIC,KAAK,IAAK;IAC5B,MAAMC,OAAO,GAAG,CAAC,GAAGV,KAAK,CAAC;IAC1BU,OAAO,CAACD,KAAK,CAAC,CAACF,IAAI,GAAG,CAACG,OAAO,CAACD,KAAK,CAAC,CAACF,IAAI;IAC1CN,QAAQ,CAACS,OAAO,CAAC;EACnB,CAAC;EAED,IAAI,CAACZ,IAAI,EAAE,oBAAOF,OAAA;IAAKe,SAAS,EAAC,eAAe;IAAAC,QAAA,EAAC;EAAwB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAE/E,oBACEpB,OAAA;IAAKe,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAC5BhB,OAAA;MAAAgB,QAAA,EAAKd,IAAI,CAACQ;IAAK;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACrBpB,OAAA;MAAAgB,QAAA,EACGZ,KAAK,CAACiB,GAAG,CAAC,CAACC,IAAI,EAAEC,GAAG,kBACnBvB,OAAA;QAAAgB,QAAA,gBACEhB,OAAA;UACEwB,IAAI,EAAC,UAAU;UACfC,OAAO,EAAEH,IAAI,CAACX,IAAK;UACnBe,QAAQ,EAAEA,CAAA,KAAMd,UAAU,CAACW,GAAG;QAAE;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjC,CAAC,EACDE,IAAI,CAACZ,KAAK;MAAA,GANJa,GAAG;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAOR,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eACLpB,OAAA;MACEwB,IAAI,EAAC,MAAM;MACXG,WAAW,EAAC,aAAa;MACzBC,KAAK,EAAEtB,OAAQ;MACfoB,QAAQ,EAAGG,CAAC,IAAKtB,UAAU,CAACsB,CAAC,CAACC,MAAM,CAACF,KAAK,CAAE;MAC5CG,SAAS,EAAGF,CAAC,IAAKA,CAAC,CAACG,GAAG,KAAK,OAAO,IAAIxB,aAAa,CAAC;IAAE;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACjB,EAAA,CA3CuBF,YAAY;AAAAgC,EAAA,GAAZhC,YAAY;AAAA,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}