{"ast":null,"code":"// src/hooks/useTaskLists.js\nimport{useMsal}from'@azure/msal-react';import{useEffect,useState}from'react';import{InteractionRequiredAuthError}from'@azure/msal-browser';const sleep=ms=>new Promise(r=>setTimeout(r,ms));const useTaskLists=()=>{const{instance,accounts,inProgress}=useMsal();const[taskLists,setTaskLists]=useState([]);const[loading,setLoading]=useState(true);useEffect(()=>{// Wait for MSAL readiness\nif(inProgress!=='none'||accounts.length===0){setLoading(true);return;}let isMounted=true;const abort=new AbortController();const getToken=async()=>{let account=instance.getActiveAccount()||accounts[0];if(!account)return null;if(!instance.getActiveAccount())instance.setActiveAccount(account);try{return await instance.acquireTokenSilent({scopes:['Tasks.Read'],account});}catch(e){if(e instanceof InteractionRequiredAuthError){try{const loginResp=await instance.loginPopup({scopes:['Tasks.Read']});instance.setActiveAccount(loginResp.account);return loginResp;}catch(e2){console.error('loginPopup failed:',e2);return null;}}// Retry once with forceRefresh\ntry{return await instance.acquireTokenSilent({scopes:['Tasks.Read'],account,forceRefresh:true});}catch(e3){console.error('acquireTokenSilent failed (forceRefresh):',e3);return null;}}};const fetchListsWithRetry=async()=>{setLoading(true);let tokenResp=await getToken();if(!tokenResp){if(isMounted)setLoading(false);return;}const url='https://graph.microsoft.com/v1.0/me/todo/lists';let attempt=0;while(attempt<3&&isMounted){try{const res=await fetch(url,{method:'GET',headers:{Authorization:\"Bearer \".concat(tokenResp.accessToken),'Cache-Control':'no-cache',Pragma:'no-cache'},signal:abort.signal});if(res.ok){var _data$value;const data=await res.json();if(isMounted)setTaskLists((_data$value=data===null||data===void 0?void 0:data.value)!==null&&_data$value!==void 0?_data$value:[]);break;}if(res.status===401||res.status===403){tokenResp=await getToken();// refresh token/login if needed\nif(!tokenResp)throw new Error(\"Auth failed (\".concat(res.status,\")\"));}else if(res.status===429||res.status>=500){await sleep(300*Math.pow(3,attempt));}else{const text=await res.text();console.error('Graph /lists error',res.status,text);break;}}catch(err){if((err===null||err===void 0?void 0:err.name)==='AbortError')break;await sleep(300*Math.pow(3,attempt));}attempt+=1;}if(isMounted)setLoading(false);};fetchListsWithRetry();return()=>{isMounted=false;abort.abort();};},[accounts,inProgress,instance]);return{taskLists,loading};};export default useTaskLists;","map":{"version":3,"names":["useMsal","useEffect","useState","InteractionRequiredAuthError","sleep","ms","Promise","r","setTimeout","useTaskLists","instance","accounts","inProgress","taskLists","setTaskLists","loading","setLoading","length","isMounted","abort","AbortController","getToken","account","getActiveAccount","setActiveAccount","acquireTokenSilent","scopes","e","loginResp","loginPopup","e2","console","error","forceRefresh","e3","fetchListsWithRetry","tokenResp","url","attempt","res","fetch","method","headers","Authorization","concat","accessToken","Pragma","signal","ok","_data$value","data","json","value","status","Error","Math","pow","text","err","name"],"sources":["C:/_Projects/DGL_ToDo/react_todo_dashboard2/src/hooks/useTaskLists.js"],"sourcesContent":["// src/hooks/useTaskLists.js\r\nimport { useMsal } from '@azure/msal-react';\r\nimport { useEffect, useState } from 'react';\r\nimport { InteractionRequiredAuthError } from '@azure/msal-browser';\r\n\r\nconst sleep = (ms) => new Promise((r) => setTimeout(r, ms));\r\n\r\nconst useTaskLists = () => {\r\n  const { instance, accounts, inProgress } = useMsal();\r\n  const [taskLists, setTaskLists] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Wait for MSAL readiness\r\n    if (inProgress !== 'none' || accounts.length === 0) {\r\n      setLoading(true);\r\n      return;\r\n    }\r\n\r\n    let isMounted = true;\r\n    const abort = new AbortController();\r\n\r\n    const getToken = async () => {\r\n      let account = instance.getActiveAccount() || accounts[0];\r\n      if (!account) return null;\r\n      if (!instance.getActiveAccount()) instance.setActiveAccount(account);\r\n\r\n      try {\r\n        return await instance.acquireTokenSilent({\r\n          scopes: ['Tasks.Read'],\r\n          account,\r\n        });\r\n      } catch (e) {\r\n        if (e instanceof InteractionRequiredAuthError) {\r\n          try {\r\n            const loginResp = await instance.loginPopup({ scopes: ['Tasks.Read'] });\r\n            instance.setActiveAccount(loginResp.account);\r\n            return loginResp;\r\n          } catch (e2) {\r\n            console.error('loginPopup failed:', e2);\r\n            return null;\r\n          }\r\n        }\r\n        // Retry once with forceRefresh\r\n        try {\r\n          return await instance.acquireTokenSilent({\r\n            scopes: ['Tasks.Read'],\r\n            account,\r\n            forceRefresh: true,\r\n          });\r\n        } catch (e3) {\r\n          console.error('acquireTokenSilent failed (forceRefresh):', e3);\r\n          return null;\r\n        }\r\n      }\r\n    };\r\n\r\n    const fetchListsWithRetry = async () => {\r\n      setLoading(true);\r\n\r\n      let tokenResp = await getToken();\r\n      if (!tokenResp) {\r\n        if (isMounted) setLoading(false);\r\n        return;\r\n      }\r\n\r\n      const url = 'https://graph.microsoft.com/v1.0/me/todo/lists';\r\n      let attempt = 0;\r\n\r\n      while (attempt < 3 && isMounted) {\r\n        try {\r\n          const res = await fetch(url, {\r\n            method: 'GET',\r\n            headers: {\r\n              Authorization: `Bearer ${tokenResp.accessToken}`,\r\n              'Cache-Control': 'no-cache',\r\n              Pragma: 'no-cache',\r\n            },\r\n            signal: abort.signal,\r\n          });\r\n\r\n          if (res.ok) {\r\n            const data = await res.json();\r\n            if (isMounted) setTaskLists(data?.value ?? []);\r\n            break;\r\n          }\r\n\r\n          if (res.status === 401 || res.status === 403) {\r\n            tokenResp = await getToken(); // refresh token/login if needed\r\n            if (!tokenResp) throw new Error(`Auth failed (${res.status})`);\r\n          } else if (res.status === 429 || res.status >= 500) {\r\n            await sleep(300 * Math.pow(3, attempt));\r\n          } else {\r\n            const text = await res.text();\r\n            console.error('Graph /lists error', res.status, text);\r\n            break;\r\n          }\r\n        } catch (err) {\r\n          if (err?.name === 'AbortError') break;\r\n          await sleep(300 * Math.pow(3, attempt));\r\n        }\r\n        attempt += 1;\r\n      }\r\n\r\n      if (isMounted) setLoading(false);\r\n    };\r\n\r\n    fetchListsWithRetry();\r\n\r\n    return () => {\r\n      isMounted = false;\r\n      abort.abort();\r\n    };\r\n  }, [accounts, inProgress, instance]);\r\n\r\n  return { taskLists, loading };\r\n};\r\n\r\nexport default useTaskLists;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}