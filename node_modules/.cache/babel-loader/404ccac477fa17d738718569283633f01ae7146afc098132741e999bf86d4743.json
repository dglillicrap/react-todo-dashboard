{"ast":null,"code":"var _jsxFileName = \"C:\\\\_Projects\\\\DGL_ToDo\\\\react_todo_dashboard2\\\\src\\\\App.jsx\",\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport useTaskLists from './hooks/useTaskLists';\nimport useTasks from './hooks/useTasks';\nimport TaskListSelector from './components/TaskListSelector';\nimport TaskPanel from './components/TaskPanel';\nimport SignInButton from './components/SignInButton';\nimport PreviewPanel from './components/PreviewPanel';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s2();\n  var _s = $RefreshSig$();\n  const {\n    taskLists\n  } = useTaskLists();\n  const [selectedGroup, setSelectedGroup] = useState('Group 1');\n  const [panelSelections, setPanelSelections] = useState(null); // ✅ Start as null\n  const [savedGroups, setSavedGroups] = useState({});\n  const [selectedTask, setSelectedTask] = useState(null);\n  const [refreshKey, setRefreshKey] = useState(0);\n\n  // ✅ Set tab title\n  useEffect(() => {\n    document.title = '✅ DGL ToDo';\n  }, []);\n\n  // ✅ Load saved groups from localStorage\n  useEffect(() => {\n    const saved = localStorage.getItem('savedGroups');\n    const parsed = saved ? JSON.parse(saved) : {};\n    setSavedGroups(parsed);\n    setPanelSelections(parsed[selectedGroup] || Array(6).fill(''));\n  }, [selectedGroup]);\n  const handlePanelListChange = (panelIndex, listId) => {\n    const updated = [...panelSelections];\n    updated[panelIndex] = listId;\n    setPanelSelections(updated);\n  };\n  const handleSaveGroup = () => {\n    const updatedGroups = {\n      ...savedGroups,\n      [selectedGroup]: [...panelSelections]\n    };\n    setSavedGroups(updatedGroups);\n    localStorage.setItem('savedGroups', JSON.stringify(updatedGroups));\n    alert(`Saved current setup to ${selectedGroup}`);\n  };\n  const handleTaskTitleUpdate = (taskId, newTitle) => {\n    if ((selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.id) === taskId) {\n      setSelectedTask(prev => ({\n        ...prev,\n        title: newTitle\n      }));\n    }\n    setRefreshKey(prev => prev + 1);\n  };\n  if (!panelSelections) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        padding: '20px'\n      },\n      children: \"Loading dashboard...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 12\n    }, this); // ✅ Wait until ready\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"top-bar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"top-left\",\n        children: /*#__PURE__*/_jsxDEV(SignInButton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"top-center\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSaveGroup,\n          children: \"Save Current Setup\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"top-right\",\n        children: /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedGroup,\n          onChange: e => setSelectedGroup(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            children: \"Group 1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            children: \"Group 2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            children: \"Group 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"panel-grid\",\n      children: _s([...Array(6)].map(_s((_, index) => {\n        _s();\n        const listId = panelSelections[index];\n        const {\n          tasks,\n          loading: loadingTasks\n        } = useTasks(listId, refreshKey);\n        const panelKey = `${index}-${listId || 'none'}-${refreshKey}`; // ✅ Key includes refreshKey\n\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"panel\",\n          children: index === 5 ? /*#__PURE__*/_jsxDEV(PreviewPanel, {\n            task: selectedTask,\n            listId: selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.parentListId,\n            onTaskTitleUpdate: handleTaskTitleUpdate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(TaskListSelector, {\n              taskLists: taskLists,\n              selectedListId: listId,\n              onSelect: id => handlePanelListChange(index, id)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 19\n            }, this), !listId ? /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Loading list...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 21\n            }, this) : loadingTasks ? /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Loading tasks...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(TaskPanel, {\n              tasks: tasks,\n              onSelectTask: task => setSelectedTask({\n                ...task,\n                parentListId: listId\n              }),\n              listId: listId\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true)\n        }, panelKey, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this);\n      }, \"G3LLop7Te3B9RLp88nTLUoUm4vQ=\", false, function () {\n        return [useTasks];\n      })), \"G3LLop7Te3B9RLp88nTLUoUm4vQ=\", false, function () {\n        return [useTasks];\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s2(App, \"AYeX6AkpeSgn3wUIXu/nyFL4My8=\", false, function () {\n  return [useTaskLists];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useTaskLists","useTasks","TaskListSelector","TaskPanel","SignInButton","PreviewPanel","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s2","_s","$RefreshSig$","taskLists","selectedGroup","setSelectedGroup","panelSelections","setPanelSelections","savedGroups","setSavedGroups","selectedTask","setSelectedTask","refreshKey","setRefreshKey","document","title","saved","localStorage","getItem","parsed","JSON","parse","Array","fill","handlePanelListChange","panelIndex","listId","updated","handleSaveGroup","updatedGroups","setItem","stringify","alert","handleTaskTitleUpdate","taskId","newTitle","id","prev","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","value","onChange","e","target","map","_","index","tasks","loading","loadingTasks","panelKey","task","parentListId","onTaskTitleUpdate","selectedListId","onSelect","onSelectTask","_c","$RefreshReg$"],"sources":["C:/_Projects/DGL_ToDo/react_todo_dashboard2/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport useTaskLists from './hooks/useTaskLists';\nimport useTasks from './hooks/useTasks';\nimport TaskListSelector from './components/TaskListSelector';\nimport TaskPanel from './components/TaskPanel';\nimport SignInButton from './components/SignInButton';\nimport PreviewPanel from './components/PreviewPanel';\nimport './styles.css';\n\nconst App = () => {\n  const { taskLists } = useTaskLists();\n  const [selectedGroup, setSelectedGroup] = useState('Group 1');\n  const [panelSelections, setPanelSelections] = useState(null); // ✅ Start as null\n  const [savedGroups, setSavedGroups] = useState({});\n  const [selectedTask, setSelectedTask] = useState(null);\n  const [refreshKey, setRefreshKey] = useState(0);\n\n  // ✅ Set tab title\n  useEffect(() => {\n    document.title = '✅ DGL ToDo';\n  }, []);\n\n  // ✅ Load saved groups from localStorage\n  useEffect(() => {\n    const saved = localStorage.getItem('savedGroups');\n    const parsed = saved ? JSON.parse(saved) : {};\n    setSavedGroups(parsed);\n    setPanelSelections(parsed[selectedGroup] || Array(6).fill(''));\n  }, [selectedGroup]);\n\n  const handlePanelListChange = (panelIndex, listId) => {\n    const updated = [...panelSelections];\n    updated[panelIndex] = listId;\n    setPanelSelections(updated);\n  };\n\n  const handleSaveGroup = () => {\n    const updatedGroups = { ...savedGroups, [selectedGroup]: [...panelSelections] };\n    setSavedGroups(updatedGroups);\n    localStorage.setItem('savedGroups', JSON.stringify(updatedGroups));\n    alert(`Saved current setup to ${selectedGroup}`);\n  };\n\n  const handleTaskTitleUpdate = (taskId, newTitle) => {\n    if (selectedTask?.id === taskId) {\n      setSelectedTask((prev) => ({ ...prev, title: newTitle }));\n    }\n    setRefreshKey((prev) => prev + 1);\n  };\n\n  if (!panelSelections) {\n    return <p style={{ padding: '20px' }}>Loading dashboard...</p>; // ✅ Wait until ready\n  }\n\n  return (\n    <div className=\"dashboard\">\n      <div className=\"top-bar\">\n        <div className=\"top-left\">\n          <SignInButton />\n        </div>\n        <div className=\"top-center\">\n          <button onClick={handleSaveGroup}>Save Current Setup</button>\n        </div>\n        <div className=\"top-right\">\n          <select value={selectedGroup} onChange={(e) => setSelectedGroup(e.target.value)}>\n            <option>Group 1</option>\n            <option>Group 2</option>\n            <option>Group 3</option>\n          </select>\n        </div>\n      </div>\n\n      <div className=\"panel-grid\">\n        {[...Array(6)].map((_, index) => {\n          const listId = panelSelections[index];\n          const { tasks, loading: loadingTasks } = useTasks(listId, refreshKey);\n          const panelKey = `${index}-${listId || 'none'}-${refreshKey}`; // ✅ Key includes refreshKey\n\n          return (\n            <div className=\"panel\" key={panelKey}>\n              {index === 5 ? (\n                <PreviewPanel\n                  task={selectedTask}\n                  listId={selectedTask?.parentListId}\n                  onTaskTitleUpdate={handleTaskTitleUpdate}\n                />\n              ) : (\n                <>\n                  <TaskListSelector\n                    taskLists={taskLists}\n                    selectedListId={listId}\n                    onSelect={(id) => handlePanelListChange(index, id)}\n                  />\n                  {!listId ? (\n                    <p>Loading list...</p>\n                  ) : loadingTasks ? (\n                    <p>Loading tasks...</p>\n                  ) : (\n                    <TaskPanel\n                      tasks={tasks}\n                      onSelectTask={(task) => setSelectedTask({ ...task, parentListId: listId })}\n                      listId={listId}\n                    />\n                  )}\n                </>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,YAAY,MAAM,sBAAsB;AAC/C,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,gBAAgB,MAAM,+BAA+B;AAC5D,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,YAAY,MAAM,2BAA2B;AACpD,OAAOC,YAAY,MAAM,2BAA2B;AACpD,OAAO,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEtB,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAAA,IAAAC,EAAA,GAAAC,YAAA;EAChB,MAAM;IAAEC;EAAU,CAAC,GAAGd,YAAY,CAAC,CAAC;EACpC,MAAM,CAACe,aAAa,EAAEC,gBAAgB,CAAC,GAAGlB,QAAQ,CAAC,SAAS,CAAC;EAC7D,MAAM,CAACmB,eAAe,EAAEC,kBAAkB,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC9D,MAAM,CAACqB,WAAW,EAAEC,cAAc,CAAC,GAAGtB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAClD,MAAM,CAACuB,YAAY,EAAEC,eAAe,CAAC,GAAGxB,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACyB,UAAU,EAAEC,aAAa,CAAC,GAAG1B,QAAQ,CAAC,CAAC,CAAC;;EAE/C;EACAC,SAAS,CAAC,MAAM;IACd0B,QAAQ,CAACC,KAAK,GAAG,YAAY;EAC/B,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA3B,SAAS,CAAC,MAAM;IACd,MAAM4B,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IACjD,MAAMC,MAAM,GAAGH,KAAK,GAAGI,IAAI,CAACC,KAAK,CAACL,KAAK,CAAC,GAAG,CAAC,CAAC;IAC7CP,cAAc,CAACU,MAAM,CAAC;IACtBZ,kBAAkB,CAACY,MAAM,CAACf,aAAa,CAAC,IAAIkB,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CAAC;EAChE,CAAC,EAAE,CAACnB,aAAa,CAAC,CAAC;EAEnB,MAAMoB,qBAAqB,GAAGA,CAACC,UAAU,EAAEC,MAAM,KAAK;IACpD,MAAMC,OAAO,GAAG,CAAC,GAAGrB,eAAe,CAAC;IACpCqB,OAAO,CAACF,UAAU,CAAC,GAAGC,MAAM;IAC5BnB,kBAAkB,CAACoB,OAAO,CAAC;EAC7B,CAAC;EAED,MAAMC,eAAe,GAAGA,CAAA,KAAM;IAC5B,MAAMC,aAAa,GAAG;MAAE,GAAGrB,WAAW;MAAE,CAACJ,aAAa,GAAG,CAAC,GAAGE,eAAe;IAAE,CAAC;IAC/EG,cAAc,CAACoB,aAAa,CAAC;IAC7BZ,YAAY,CAACa,OAAO,CAAC,aAAa,EAAEV,IAAI,CAACW,SAAS,CAACF,aAAa,CAAC,CAAC;IAClEG,KAAK,CAAC,0BAA0B5B,aAAa,EAAE,CAAC;EAClD,CAAC;EAED,MAAM6B,qBAAqB,GAAGA,CAACC,MAAM,EAAEC,QAAQ,KAAK;IAClD,IAAI,CAAAzB,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAE0B,EAAE,MAAKF,MAAM,EAAE;MAC/BvB,eAAe,CAAE0B,IAAI,KAAM;QAAE,GAAGA,IAAI;QAAEtB,KAAK,EAAEoB;MAAS,CAAC,CAAC,CAAC;IAC3D;IACAtB,aAAa,CAAEwB,IAAI,IAAKA,IAAI,GAAG,CAAC,CAAC;EACnC,CAAC;EAED,IAAI,CAAC/B,eAAe,EAAE;IACpB,oBAAOV,OAAA;MAAG0C,KAAK,EAAE;QAAEC,OAAO,EAAE;MAAO,CAAE;MAAAC,QAAA,EAAC;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,CAAC,CAAC;EAClE;EAEA,oBACEhD,OAAA;IAAKiD,SAAS,EAAC,WAAW;IAAAL,QAAA,gBACxB5C,OAAA;MAAKiD,SAAS,EAAC,SAAS;MAAAL,QAAA,gBACtB5C,OAAA;QAAKiD,SAAS,EAAC,UAAU;QAAAL,QAAA,eACvB5C,OAAA,CAACH,YAAY;UAAAgD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACb,CAAC,eACNhD,OAAA;QAAKiD,SAAS,EAAC,YAAY;QAAAL,QAAA,eACzB5C,OAAA;UAAQkD,OAAO,EAAElB,eAAgB;UAAAY,QAAA,EAAC;QAAkB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1D,CAAC,eACNhD,OAAA;QAAKiD,SAAS,EAAC,WAAW;QAAAL,QAAA,eACxB5C,OAAA;UAAQmD,KAAK,EAAE3C,aAAc;UAAC4C,QAAQ,EAAGC,CAAC,IAAK5C,gBAAgB,CAAC4C,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;UAAAP,QAAA,gBAC9E5C,OAAA;YAAA4C,QAAA,EAAQ;UAAO;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACxBhD,OAAA;YAAA4C,QAAA,EAAQ;UAAO;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACxBhD,OAAA;YAAA4C,QAAA,EAAQ;UAAO;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClB;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAENhD,OAAA;MAAKiD,SAAS,EAAC,YAAY;MAAAL,QAAA,EAAAvC,EAAA,CACxB,CAAC,GAAGqB,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC6B,GAAG,CAAAlD,EAAA,CAAC,CAACmD,CAAC,EAAEC,KAAK,KAAK;QAAApD,EAAA;QAC/B,MAAMyB,MAAM,GAAGpB,eAAe,CAAC+C,KAAK,CAAC;QACrC,MAAM;UAAEC,KAAK;UAAEC,OAAO,EAAEC;QAAa,CAAC,GAAGlE,QAAQ,CAACoC,MAAM,EAAEd,UAAU,CAAC;QACrE,MAAM6C,QAAQ,GAAG,GAAGJ,KAAK,IAAI3B,MAAM,IAAI,MAAM,IAAId,UAAU,EAAE,CAAC,CAAC;;QAE/D,oBACEhB,OAAA;UAAKiD,SAAS,EAAC,OAAO;UAAAL,QAAA,EACnBa,KAAK,KAAK,CAAC,gBACVzD,OAAA,CAACF,YAAY;YACXgE,IAAI,EAAEhD,YAAa;YACnBgB,MAAM,EAAEhB,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEiD,YAAa;YACnCC,iBAAiB,EAAE3B;UAAsB;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC1C,CAAC,gBAEFhD,OAAA,CAAAE,SAAA;YAAA0C,QAAA,gBACE5C,OAAA,CAACL,gBAAgB;cACfY,SAAS,EAAEA,SAAU;cACrB0D,cAAc,EAAEnC,MAAO;cACvBoC,QAAQ,EAAG1B,EAAE,IAAKZ,qBAAqB,CAAC6B,KAAK,EAAEjB,EAAE;YAAE;cAAAK,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACpD,CAAC,EACD,CAAClB,MAAM,gBACN9B,OAAA;cAAA4C,QAAA,EAAG;YAAe;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAG,CAAC,GACpBY,YAAY,gBACd5D,OAAA;cAAA4C,QAAA,EAAG;YAAgB;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAG,CAAC,gBAEvBhD,OAAA,CAACJ,SAAS;cACR8D,KAAK,EAAEA,KAAM;cACbS,YAAY,EAAGL,IAAI,IAAK/C,eAAe,CAAC;gBAAE,GAAG+C,IAAI;gBAAEC,YAAY,EAAEjC;cAAO,CAAC,CAAE;cAC3EA,MAAM,EAAEA;YAAO;cAAAe,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAChB,CACF;UAAA,eACD;QACH,GA1ByBa,QAAQ;UAAAhB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OA2B/B,CAAC;MAEV,CAAC;QAAA,QAjC0CtD,QAAQ;MAAA,EAiClD,CAAC;QAAA,QAjCyCA,QAAQ;MAAA;IAAA;MAAAmD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAkChD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC5C,GAAA,CAvGID,GAAG;EAAA,QACeV,YAAY;AAAA;AAAA2E,EAAA,GAD9BjE,GAAG;AAyGT,eAAeA,GAAG;AAAC,IAAAiE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}