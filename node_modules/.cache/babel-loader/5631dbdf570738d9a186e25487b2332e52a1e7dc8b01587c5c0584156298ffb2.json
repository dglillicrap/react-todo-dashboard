{"ast":null,"code":"/*! @azure/msal-browser v4.24.1 2025-09-30 */\n'use strict';\n\nimport { StandardInteractionClient } from './StandardInteractionClient.mjs';\nimport { PerformanceEvents, invokeAsync, SilentFlowClient } from '@azure/msal-common/browser';\nimport { ApiId } from '../utils/BrowserConstants.mjs';\nimport { BrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { cryptoKeyNotFound } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass SilentCacheClient extends StandardInteractionClient {\n  /**\r\n   * Returns unexpired tokens from the cache, if available\r\n   * @param silentRequest\r\n   */\n  async acquireToken(silentRequest) {\n    this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentCacheClientAcquireToken, silentRequest.correlationId);\n    // Telemetry manager only used to increment cacheHits here\n    const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenSilent_silentFlow);\n    const clientConfig = await invokeAsync(this.getClientConfiguration.bind(this), PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.logger, this.performanceClient, this.correlationId)({\n      serverTelemetryManager,\n      requestAuthority: silentRequest.authority,\n      requestAzureCloudOptions: silentRequest.azureCloudOptions,\n      account: silentRequest.account\n    });\n    const silentAuthClient = new SilentFlowClient(clientConfig, this.performanceClient);\n    this.logger.verbose(\"Silent auth client created\");\n    try {\n      const response = await invokeAsync(silentAuthClient.acquireCachedToken.bind(silentAuthClient), PerformanceEvents.SilentFlowClientAcquireCachedToken, this.logger, this.performanceClient, silentRequest.correlationId)(silentRequest);\n      const authResponse = response[0];\n      this.performanceClient.addFields({\n        fromCache: true\n      }, silentRequest.correlationId);\n      return authResponse;\n    } catch (error) {\n      if (error instanceof BrowserAuthError && error.errorCode === cryptoKeyNotFound) {\n        this.logger.verbose(\"Signing keypair for bound access token not found. Refreshing bound access token and generating a new crypto keypair.\");\n      }\n      throw error;\n    }\n  }\n  /**\r\n   * API to silenty clear the browser cache.\r\n   * @param logoutRequest\r\n   */\n  logout(logoutRequest) {\n    this.logger.verbose(\"logoutRedirect called\");\n    const validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\n    return this.clearCacheOnLogout(validLogoutRequest.correlationId, validLogoutRequest?.account);\n  }\n}\nexport { SilentCacheClient };","map":{"version":3,"names":["SilentCacheClient","StandardInteractionClient","acquireToken","silentRequest","performanceClient","addQueueMeasurement","PerformanceEvents","SilentCacheClientAcquireToken","correlationId","serverTelemetryManager","initializeServerTelemetryManager","ApiId","acquireTokenSilent_silentFlow","clientConfig","invokeAsync","getClientConfiguration","bind","StandardInteractionClientGetClientConfiguration","logger","requestAuthority","authority","requestAzureCloudOptions","azureCloudOptions","account","silentAuthClient","SilentFlowClient","verbose","response","acquireCachedToken","SilentFlowClientAcquireCachedToken","authResponse","addFields","fromCache","error","BrowserAuthError","errorCode","cryptoKeyNotFound","logout","logoutRequest","validLogoutRequest","initializeLogoutRequest","clearCacheOnLogout"],"sources":["../../src/interaction_client/SilentCacheClient.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;AAAA;;;AAGG;AAiBG,MAAOA,iBAAkB,SAAQC,yBAAyB;EAC5D;;;AAGG;EACH,MAAMC,YAAYA,CACdC,aAAsC;IAEtC,IAAI,CAACC,iBAAiB,CAACC,mBAAmB,CACtCC,iBAAiB,CAACC,6BAA6B,EAC/CJ,aAAa,CAACK,aAAa,CAC9B;;IAED,MAAMC,sBAAsB,GAAG,IAAI,CAACC,gCAAgC,CAChEC,KAAK,CAACC,6BAA6B,CACtC;IAED,MAAMC,YAAY,GAAG,MAAMC,WAAW,CAClC,IAAI,CAACC,sBAAsB,CAACC,IAAI,CAAC,IAAI,CAAC,EACtCV,iBAAiB,CAACW,+CAA+C,EACjE,IAAI,CAACC,MAAM,EACX,IAAI,CAACd,iBAAiB,EACtB,IAAI,CAACI,aAAa,CACrB,CAAC;MACEC,sBAAsB;MACtBU,gBAAgB,EAAEhB,aAAa,CAACiB,SAAS;MACzCC,wBAAwB,EAAElB,aAAa,CAACmB,iBAAiB;MACzDC,OAAO,EAAEpB,aAAa,CAACoB;IAC1B,EAAC;IACF,MAAMC,gBAAgB,GAAG,IAAIC,gBAAgB,CACzCZ,YAAY,EACZ,IAAI,CAACT,iBAAiB,CACzB;IACD,IAAI,CAACc,MAAM,CAACQ,OAAO,CAAC,4BAA4B,CAAC;IAEjD,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMb,WAAW,CAC9BU,gBAAgB,CAACI,kBAAkB,CAACZ,IAAI,CAACQ,gBAAgB,CAAC,EAC1DlB,iBAAiB,CAACuB,kCAAkC,EACpD,IAAI,CAACX,MAAM,EACX,IAAI,CAACd,iBAAiB,EACtBD,aAAa,CAACK,aAAa,CAC9B,CAACL,aAAa,CAAC;MAChB,MAAM2B,YAAY,GAAGH,QAAQ,CAAC,CAAC,CAAyB;MAExD,IAAI,CAACvB,iBAAiB,CAAC2B,SAAS,CAC5B;QACIC,SAAS,EAAE;MACd,GACD7B,aAAa,CAACK,aAAa,CAC9B;MACD,OAAOsB,YAAY;IACtB,EAAC,OAAOG,KAAK,EAAE;MACZ,IACIA,KAAK,YAAYC,gBAAgB,IACjCD,KAAK,CAACE,SAAS,KAAKC,iBAAuC,EAC7D;QACE,IAAI,CAAClB,MAAM,CAACQ,OAAO,CACf,sHAAsH,CACzH;MACJ;MACD,MAAMO,KAAK;IACd;;EAGL;;;AAGG;EACHI,MAAMA,CAACC,aAAiC;IACpC,IAAI,CAACpB,MAAM,CAACQ,OAAO,CAAC,uBAAuB,CAAC;IAC5C,MAAMa,kBAAkB,GAAG,IAAI,CAACC,uBAAuB,CAACF,aAAa,CAAC;IACtE,OAAO,IAAI,CAACG,kBAAkB,CAC1BF,kBAAkB,CAAC/B,aAAa,EAChC+B,kBAAkB,EAAEhB,OAAO,CAC9B;;AAER","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}