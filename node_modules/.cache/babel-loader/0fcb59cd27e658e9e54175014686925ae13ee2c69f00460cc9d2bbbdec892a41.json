{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useTasks.js\nimport { useMsal } from '@azure/msal-react';\nimport { useEffect, useState } from 'react';\nconst sleep = ms => new Promise(r => setTimeout(r, ms));\nconst useTasks = (listId, refreshKey = 0) => {\n  _s();\n  const {\n    instance,\n    accounts,\n    inProgress\n  } = useMsal();\n  const [tasks, setTasks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Nothing to do if no list is selected\n    if (!listId) {\n      setTasks([]);\n      setLoading(false);\n      return;\n    }\n\n    // Wait until MSAL is ready and an account is present\n    if (inProgress !== 'none' || accounts.length === 0) {\n      setLoading(true);\n      return;\n    }\n    let isMounted = true;\n    const abort = new AbortController();\n    const getToken = async (forceRefresh = false) => {\n      let account = instance.getActiveAccount() || accounts[0];\n      if (!account) return null;\n      if (!instance.getActiveAccount()) instance.setActiveAccount(account);\n      try {\n        return await instance.acquireTokenSilent({\n          scopes: ['Tasks.Read'],\n          account,\n          forceRefresh\n        });\n      } catch (e) {\n        // Try once more with forceRefresh if not already\n        if (!forceRefresh) {\n          try {\n            return await instance.acquireTokenSilent({\n              scopes: ['Tasks.Read'],\n              account,\n              forceRefresh: true\n            });\n          } catch (e2) {\n            console.error('acquireTokenSilent failed (forceRefresh):', e2);\n            return null;\n          }\n        }\n        console.error('acquireTokenSilent failed:', e);\n        return null;\n      }\n    };\n    const fetchTasksWithRetry = async () => {\n      setLoading(true);\n      let tokenResp = await getToken(false);\n      if (!tokenResp) {\n        if (isMounted) setLoading(false);\n        return;\n      }\n      const url = `https://graph.microsoft.com/v1.0/me/todo/lists/${listId}/tasks`;\n      let attempt = 0;\n      while (attempt < 3 && isMounted) {\n        try {\n          const res = await fetch(url, {\n            method: 'GET',\n            headers: {\n              Authorization: `Bearer ${tokenResp.accessToken}`,\n              'Cache-Control': 'no-cache',\n              Pragma: 'no-cache'\n            },\n            signal: abort.signal\n          });\n          if (res.ok) {\n            var _data$value;\n            const data = await res.json();\n            if (isMounted) setTasks((_data$value = data === null || data === void 0 ? void 0 : data.value) !== null && _data$value !== void 0 ? _data$value : []);\n            break;\n          }\n\n          // Handle retriable statuses\n          if (res.status === 401 || res.status === 403) {\n            // Try to refresh token once and retry\n            tokenResp = await getToken(true);\n            if (!tokenResp) throw new Error(`Auth failed (${res.status})`);\n          } else if (res.status === 429 || res.status >= 500) {\n            // Backoff: 300ms, 900ms\n            await sleep(300 * Math.pow(3, attempt));\n          } else {\n            // Non-retriable\n            const text = await res.text();\n            console.error('Graph /tasks error', res.status, text);\n            break;\n          }\n        } catch (err) {\n          if ((err === null || err === void 0 ? void 0 : err.name) === 'AbortError') break; // unmounted / re-run\n          // Backoff on generic network errors\n          await sleep(300 * Math.pow(3, attempt));\n        }\n        attempt += 1;\n      }\n      if (isMounted) setLoading(false);\n    };\n    fetchTasksWithRetry();\n    return () => {\n      isMounted = false;\n      abort.abort();\n    };\n    // Re-run when listId changes, a global refresh is requested,\n    // or when MSAL becomes ready.\n  }, [listId, refreshKey, accounts, inProgress, instance]);\n  return {\n    tasks,\n    loading\n  };\n};\n_s(useTasks, \"na9CKDc/bugJYHDYKmXZxJg36HI=\", false, function () {\n  return [useMsal];\n});\nexport default useTasks;","map":{"version":3,"names":["useMsal","useEffect","useState","sleep","ms","Promise","r","setTimeout","useTasks","listId","refreshKey","_s","instance","accounts","inProgress","tasks","setTasks","loading","setLoading","length","isMounted","abort","AbortController","getToken","forceRefresh","account","getActiveAccount","setActiveAccount","acquireTokenSilent","scopes","e","e2","console","error","fetchTasksWithRetry","tokenResp","url","attempt","res","fetch","method","headers","Authorization","accessToken","Pragma","signal","ok","_data$value","data","json","value","status","Error","Math","pow","text","err","name"],"sources":["C:/_Projects/DGL_ToDo/react_todo_dashboard2/src/hooks/useTasks.js"],"sourcesContent":["// src/hooks/useTasks.js\r\nimport { useMsal } from '@azure/msal-react';\r\nimport { useEffect, useState } from 'react';\r\n\r\nconst sleep = (ms) => new Promise((r) => setTimeout(r, ms));\r\n\r\nconst useTasks = (listId, refreshKey = 0) => {\r\n  const { instance, accounts, inProgress } = useMsal();\r\n  const [tasks, setTasks] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Nothing to do if no list is selected\r\n    if (!listId) {\r\n      setTasks([]);\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    // Wait until MSAL is ready and an account is present\r\n    if (inProgress !== 'none' || accounts.length === 0) {\r\n      setLoading(true);\r\n      return;\r\n    }\r\n\r\n    let isMounted = true;\r\n    const abort = new AbortController();\r\n\r\n    const getToken = async (forceRefresh = false) => {\r\n      let account = instance.getActiveAccount() || accounts[0];\r\n      if (!account) return null;\r\n      if (!instance.getActiveAccount()) instance.setActiveAccount(account);\r\n\r\n      try {\r\n        return await instance.acquireTokenSilent({\r\n          scopes: ['Tasks.Read'],\r\n          account,\r\n          forceRefresh,\r\n        });\r\n      } catch (e) {\r\n        // Try once more with forceRefresh if not already\r\n        if (!forceRefresh) {\r\n          try {\r\n            return await instance.acquireTokenSilent({\r\n              scopes: ['Tasks.Read'],\r\n              account,\r\n              forceRefresh: true,\r\n            });\r\n          } catch (e2) {\r\n            console.error('acquireTokenSilent failed (forceRefresh):', e2);\r\n            return null;\r\n          }\r\n        }\r\n        console.error('acquireTokenSilent failed:', e);\r\n        return null;\r\n      }\r\n    };\r\n\r\n    const fetchTasksWithRetry = async () => {\r\n      setLoading(true);\r\n\r\n      let tokenResp = await getToken(false);\r\n      if (!tokenResp) {\r\n        if (isMounted) setLoading(false);\r\n        return;\r\n      }\r\n\r\n      const url = `https://graph.microsoft.com/v1.0/me/todo/lists/${listId}/tasks`;\r\n      let attempt = 0;\r\n\r\n      while (attempt < 3 && isMounted) {\r\n        try {\r\n          const res = await fetch(url, {\r\n            method: 'GET',\r\n            headers: {\r\n              Authorization: `Bearer ${tokenResp.accessToken}`,\r\n              'Cache-Control': 'no-cache',\r\n              Pragma: 'no-cache',\r\n            },\r\n            signal: abort.signal,\r\n          });\r\n\r\n          if (res.ok) {\r\n            const data = await res.json();\r\n            if (isMounted) setTasks(data?.value ?? []);\r\n            break;\r\n          }\r\n\r\n          // Handle retriable statuses\r\n          if (res.status === 401 || res.status === 403) {\r\n            // Try to refresh token once and retry\r\n            tokenResp = await getToken(true);\r\n            if (!tokenResp) throw new Error(`Auth failed (${res.status})`);\r\n          } else if (res.status === 429 || res.status >= 500) {\r\n            // Backoff: 300ms, 900ms\r\n            await sleep(300 * Math.pow(3, attempt));\r\n          } else {\r\n            // Non-retriable\r\n            const text = await res.text();\r\n            console.error('Graph /tasks error', res.status, text);\r\n            break;\r\n          }\r\n        } catch (err) {\r\n          if (err?.name === 'AbortError') break; // unmounted / re-run\r\n          // Backoff on generic network errors\r\n          await sleep(300 * Math.pow(3, attempt));\r\n        }\r\n        attempt += 1;\r\n      }\r\n\r\n      if (isMounted) setLoading(false);\r\n    };\r\n\r\n    fetchTasksWithRetry();\r\n\r\n    return () => {\r\n      isMounted = false;\r\n      abort.abort();\r\n    };\r\n    // Re-run when listId changes, a global refresh is requested,\r\n    // or when MSAL becomes ready.\r\n  }, [listId, refreshKey, accounts, inProgress, instance]);\r\n\r\n  return { tasks, loading };\r\n};\r\n\r\nexport default useTasks;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}