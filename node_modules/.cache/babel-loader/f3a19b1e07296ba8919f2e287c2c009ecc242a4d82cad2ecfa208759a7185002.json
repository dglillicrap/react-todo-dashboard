{"ast":null,"code":"var _jsxFileName = \"C:\\\\_Projects\\\\DGL_ToDo\\\\react_todo_dashboard2\\\\src\\\\components\\\\TaskPanel.jsx\",\n  _s = $RefreshSig$();\n// src/components/TaskPanel.jsx\nimport React, { useState } from 'react';\nimport { useMsal } from '@azure/msal-react';\nimport { InteractionRequiredAuthError } from '@azure/msal-browser';\nimport useTasks from '../hooks/useTasks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskPanel = ({\n  listId,\n  refreshKey = 0,\n  onSelectTask\n}) => {\n  _s();\n  const {\n    instance\n  } = useMsal();\n  const [newTask, setNewTask] = useState('');\n  const {\n    tasks,\n    loading: loadingTasks\n  } = useTasks(listId, refreshKey);\n  const handleAddTask = async () => {\n    if (!newTask.trim() || !listId) return;\n    const account = instance.getActiveAccount();\n    if (!account) return;\n    let response;\n    try {\n      response = await instance.acquireTokenSilent({\n        scopes: ['Tasks.ReadWrite'],\n        account\n      });\n    } catch (error) {\n      if (error instanceof InteractionRequiredAuthError) {\n        response = await instance.loginPopup({\n          scopes: ['Tasks.ReadWrite']\n        });\n        instance.setActiveAccount(response.account);\n      } else {\n        console.error('Error acquiring token:', error);\n        return;\n      }\n    }\n    await fetch(`https://graph.microsoft.com/v1.0/me/todo/lists/${listId}/tasks`, {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${response.accessToken}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        title: newTask\n      })\n    });\n    setNewTask('');\n    // No need to manually refresh: useTasks will re-run when App's refreshKey changes if needed\n  };\n  const handleCompleteTask = async taskId => {\n    const account = instance.getActiveAccount();\n    if (!account) return;\n    let response;\n    try {\n      response = await instance.acquireTokenSilent({\n        scopes: ['Tasks.ReadWrite'],\n        account\n      });\n    } catch (error) {\n      if (error instanceof InteractionRequiredAuthError) {\n        response = await instance.loginPopup({\n          scopes: ['Tasks.ReadWrite']\n        });\n        instance.setActiveAccount(response.account);\n      } else {\n        console.error('Error acquiring token:', error);\n        return;\n      }\n    }\n    await fetch(`https://graph.microsoft.com/v1.0/me/todo/lists/${listId}/tasks/${taskId}`, {\n      method: 'PATCH',\n      headers: {\n        Authorization: `Bearer ${response.accessToken}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        status: 'completed'\n      })\n    });\n  };\n\n  // Filter + sort (incomplete only, üï≥Ô∏è to bottom)\n  const incompleteTasks = (tasks || []).filter(task => task.status !== 'completed').sort((a, b) => {\n    const aTitle = a.title || '';\n    const bTitle = b.title || '';\n    const aIsBottom = aTitle.startsWith('üï≥Ô∏è') || aTitle.startsWith('~');\n    const bIsBottom = bTitle.startsWith('üï≥Ô∏è') || bTitle.startsWith('~');\n    if (aIsBottom && !bIsBottom) return 1;\n    if (!aIsBottom && bIsBottom) return -1;\n    return aTitle.localeCompare(bTitle);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [loadingTasks ? /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        fontSize: '0.8rem'\n      },\n      children: \"Loading tasks...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this) : incompleteTasks.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        fontSize: '0.8rem'\n      },\n      children: \"No tasks found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      style: {\n        fontSize: '0.8rem'\n      },\n      children: incompleteTasks.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          onChange: () => handleCompleteTask(task.id),\n          style: {\n            marginRight: '6px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          onClick: () => onSelectTask(task),\n          children: task.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 15\n        }, this)]\n      }, task.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: newTask,\n      onChange: e => setNewTask(e.target.value),\n      onKeyDown: e => e.key === 'Enter' && handleAddTask(),\n      placeholder: \"Add new task\",\n      style: {\n        width: '100%',\n        marginTop: '8px',\n        fontSize: '0.8rem'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskPanel, \"8TTdskILIblIl2mY91IlIX6msTA=\", false, function () {\n  return [useMsal, useTasks];\n});\n_c = TaskPanel;\nexport default TaskPanel;\nvar _c;\n$RefreshReg$(_c, \"TaskPanel\");","map":{"version":3,"names":["React","useState","useMsal","InteractionRequiredAuthError","useTasks","jsxDEV","_jsxDEV","TaskPanel","listId","refreshKey","onSelectTask","_s","instance","newTask","setNewTask","tasks","loading","loadingTasks","handleAddTask","trim","account","getActiveAccount","response","acquireTokenSilent","scopes","error","loginPopup","setActiveAccount","console","fetch","method","headers","Authorization","accessToken","body","JSON","stringify","title","handleCompleteTask","taskId","status","incompleteTasks","filter","task","sort","a","b","aTitle","bTitle","aIsBottom","startsWith","bIsBottom","localeCompare","children","style","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","length","map","type","onChange","id","marginRight","onClick","value","e","target","onKeyDown","key","placeholder","width","marginTop","_c","$RefreshReg$"],"sources":["C:/_Projects/DGL_ToDo/react_todo_dashboard2/src/components/TaskPanel.jsx"],"sourcesContent":["// src/components/TaskPanel.jsx\r\nimport React, { useState } from 'react';\r\nimport { useMsal } from '@azure/msal-react';\r\nimport { InteractionRequiredAuthError } from '@azure/msal-browser';\r\nimport useTasks from '../hooks/useTasks';\r\n\r\nconst TaskPanel = ({ listId, refreshKey = 0, onSelectTask }) => {\r\n  const { instance } = useMsal();\r\n  const [newTask, setNewTask] = useState('');\r\n  const { tasks, loading: loadingTasks } = useTasks(listId, refreshKey);\r\n\r\n  const handleAddTask = async () => {\r\n    if (!newTask.trim() || !listId) return;\r\n    const account = instance.getActiveAccount();\r\n    if (!account) return;\r\n    let response;\r\n    try {\r\n      response = await instance.acquireTokenSilent({\r\n        scopes: ['Tasks.ReadWrite'],\r\n        account,\r\n      });\r\n    } catch (error) {\r\n      if (error instanceof InteractionRequiredAuthError) {\r\n        response = await instance.loginPopup({ scopes: ['Tasks.ReadWrite'] });\r\n        instance.setActiveAccount(response.account);\r\n      } else {\r\n        console.error('Error acquiring token:', error);\r\n        return;\r\n      }\r\n    }\r\n    await fetch(`https://graph.microsoft.com/v1.0/me/todo/lists/${listId}/tasks`, {\r\n      method: 'POST',\r\n      headers: {\r\n        Authorization: `Bearer ${response.accessToken}`,\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ title: newTask }),\r\n    });\r\n    setNewTask('');\r\n    // No need to manually refresh: useTasks will re-run when App's refreshKey changes if needed\r\n  };\r\n\r\n  const handleCompleteTask = async (taskId) => {\r\n    const account = instance.getActiveAccount();\r\n    if (!account) return;\r\n    let response;\r\n    try {\r\n      response = await instance.acquireTokenSilent({\r\n        scopes: ['Tasks.ReadWrite'],\r\n        account,\r\n      });\r\n    } catch (error) {\r\n      if (error instanceof InteractionRequiredAuthError) {\r\n        response = await instance.loginPopup({ scopes: ['Tasks.ReadWrite'] });\r\n        instance.setActiveAccount(response.account);\r\n      } else {\r\n        console.error('Error acquiring token:', error);\r\n        return;\r\n      }\r\n    }\r\n    await fetch(`https://graph.microsoft.com/v1.0/me/todo/lists/${listId}/tasks/${taskId}`, {\r\n      method: 'PATCH',\r\n      headers: {\r\n        Authorization: `Bearer ${response.accessToken}`,\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ status: 'completed' }),\r\n    });\r\n  };\r\n\r\n  // Filter + sort (incomplete only, üï≥Ô∏è to bottom)\r\n  const incompleteTasks = (tasks || [])\r\n    .filter((task) => task.status !== 'completed')\r\n    .sort((a, b) => {\r\n      const aTitle = a.title || '';\r\n      const bTitle = b.title || '';\r\n      const aIsBottom = aTitle.startsWith('üï≥Ô∏è') || aTitle.startsWith('~');\r\n      const bIsBottom = bTitle.startsWith('üï≥Ô∏è') || bTitle.startsWith('~');\r\n      if (aIsBottom && !bIsBottom) return 1;\r\n      if (!aIsBottom && bIsBottom) return -1;\r\n      return aTitle.localeCompare(bTitle);\r\n    });\r\n\r\n  return (\r\n    <div>\r\n      {loadingTasks ? (\r\n        <p style={{ fontSize: '0.8rem' }}>Loading tasks...</p>\r\n      ) : incompleteTasks.length === 0 ? (\r\n        <p style={{ fontSize: '0.8rem' }}>No tasks found.</p>\r\n      ) : (\r\n        <ul style={{ fontSize: '0.8rem' }}>\r\n          {incompleteTasks.map((task) => (\r\n            <li key={task.id}>\r\n              <input\r\n                type=\"checkbox\"\r\n                onChange={() => handleCompleteTask(task.id)}\r\n                style={{ marginRight: '6px' }}\r\n              />\r\n              <span onClick={() => onSelectTask(task)}>{task.title}</span>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n\r\n      <input\r\n        type=\"text\"\r\n        value={newTask}\r\n        onChange={(e) => setNewTask(e.target.value)}\r\n        onKeyDown={(e) => e.key === 'Enter' && handleAddTask()}\r\n        placeholder=\"Add new task\"\r\n        style={{ width: '100%', marginTop: '8px', fontSize: '0.8rem' }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskPanel;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}