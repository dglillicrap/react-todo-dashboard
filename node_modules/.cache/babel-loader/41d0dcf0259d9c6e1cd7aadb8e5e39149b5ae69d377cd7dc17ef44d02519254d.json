{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useTasks.js\nimport { useMsal } from '@azure/msal-react';\nimport { useEffect, useState } from 'react';\nconst useTasks = (listId, refreshKey = 0) => {\n  _s();\n  const {\n    instance,\n    accounts,\n    inProgress\n  } = useMsal();\n  const [tasks, setTasks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // No list selected: nothing to fetch\n    if (!listId) {\n      setTasks([]);\n      setLoading(false);\n      return;\n    }\n\n    // Wait until MSAL is ready and we have an account\n    if (inProgress !== 'none' || accounts.length === 0) {\n      // stay in loading state until MSAL is ready\n      setLoading(true);\n      return;\n    }\n    let isMounted = true;\n    const abort = new AbortController();\n    const fetchTasks = async () => {\n      try {\n        var _data$value;\n        setLoading(true);\n\n        // Ensure we have an active account\n        let account = instance.getActiveAccount();\n        if (!account) {\n          account = accounts[0];\n          if (account) instance.setActiveAccount(account);\n        }\n        if (!account) {\n          // Shouldn’t happen because accounts.length > 0, but guard anyway\n          if (isMounted) setLoading(false);\n          return;\n        }\n        const tokenResp = await instance.acquireTokenSilent({\n          scopes: ['Tasks.Read'],\n          account\n        });\n        const res = await fetch(`https://graph.microsoft.com/v1.0/me/todo/lists/${listId}/tasks`, {\n          method: 'GET',\n          headers: {\n            Authorization: `Bearer ${tokenResp.accessToken}`,\n            'Cache-Control': 'no-cache',\n            Pragma: 'no-cache'\n          },\n          signal: abort.signal\n        });\n        if (!res.ok) {\n          throw new Error(`Graph /tasks ${res.status}`);\n        }\n        const data = await res.json();\n        if (isMounted) setTasks((_data$value = data === null || data === void 0 ? void 0 : data.value) !== null && _data$value !== void 0 ? _data$value : []);\n      } catch (err) {\n        if ((err === null || err === void 0 ? void 0 : err.name) === 'AbortError') return; // remount/rerender cancelled prior request\n        console.error('Error fetching tasks:', err);\n      } finally {\n        if (isMounted) setLoading(false);\n      }\n    };\n    fetchTasks();\n    return () => {\n      isMounted = false;\n      abort.abort();\n    };\n    // Re-run when any of these change:\n    // - listId (user changes list)\n    // - refreshKey (global/manual refresh)\n    // - accounts / inProgress (MSAL becomes ready after reload)\n  }, [listId, refreshKey, accounts, inProgress, instance]);\n  return {\n    tasks,\n    loading\n  };\n};\n_s(useTasks, \"na9CKDc/bugJYHDYKmXZxJg36HI=\", false, function () {\n  return [useMsal];\n});\nexport default useTasks;","map":{"version":3,"names":["useMsal","useEffect","useState","useTasks","listId","refreshKey","_s","instance","accounts","inProgress","tasks","setTasks","loading","setLoading","length","isMounted","abort","AbortController","fetchTasks","_data$value","account","getActiveAccount","setActiveAccount","tokenResp","acquireTokenSilent","scopes","res","fetch","method","headers","Authorization","accessToken","Pragma","signal","ok","Error","status","data","json","value","err","name","console","error"],"sources":["C:/_Projects/DGL_ToDo/react_todo_dashboard2/src/hooks/useTasks.js"],"sourcesContent":["// src/hooks/useTasks.js\r\nimport { useMsal } from '@azure/msal-react';\r\nimport { useEffect, useState } from 'react';\r\n\r\nconst useTasks = (listId, refreshKey = 0) => {\r\n  const { instance, accounts, inProgress } = useMsal();\r\n  const [tasks, setTasks] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // No list selected: nothing to fetch\r\n    if (!listId) {\r\n      setTasks([]);\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    // Wait until MSAL is ready and we have an account\r\n    if (inProgress !== 'none' || accounts.length === 0) {\r\n      // stay in loading state until MSAL is ready\r\n      setLoading(true);\r\n      return;\r\n    }\r\n\r\n    let isMounted = true;\r\n    const abort = new AbortController();\r\n\r\n    const fetchTasks = async () => {\r\n      try {\r\n        setLoading(true);\r\n\r\n        // Ensure we have an active account\r\n        let account = instance.getActiveAccount();\r\n        if (!account) {\r\n          account = accounts[0];\r\n          if (account) instance.setActiveAccount(account);\r\n        }\r\n        if (!account) {\r\n          // Shouldn’t happen because accounts.length > 0, but guard anyway\r\n          if (isMounted) setLoading(false);\r\n          return;\r\n        }\r\n\r\n        const tokenResp = await instance.acquireTokenSilent({\r\n          scopes: ['Tasks.Read'],\r\n          account,\r\n        });\r\n\r\n        const res = await fetch(\r\n          `https://graph.microsoft.com/v1.0/me/todo/lists/${listId}/tasks`,\r\n          {\r\n            method: 'GET',\r\n            headers: {\r\n              Authorization: `Bearer ${tokenResp.accessToken}`,\r\n              'Cache-Control': 'no-cache',\r\n              Pragma: 'no-cache',\r\n            },\r\n            signal: abort.signal,\r\n          }\r\n        );\r\n\r\n        if (!res.ok) {\r\n          throw new Error(`Graph /tasks ${res.status}`);\r\n        }\r\n\r\n        const data = await res.json();\r\n        if (isMounted) setTasks(data?.value ?? []);\r\n      } catch (err) {\r\n        if (err?.name === 'AbortError') return; // remount/rerender cancelled prior request\r\n        console.error('Error fetching tasks:', err);\r\n      } finally {\r\n        if (isMounted) setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchTasks();\r\n\r\n    return () => {\r\n      isMounted = false;\r\n      abort.abort();\r\n    };\r\n    // Re-run when any of these change:\r\n    // - listId (user changes list)\r\n    // - refreshKey (global/manual refresh)\r\n    // - accounts / inProgress (MSAL becomes ready after reload)\r\n  }, [listId, refreshKey, accounts, inProgress, instance]);\r\n\r\n  return { tasks, loading };\r\n};\r\n\r\nexport default useTasks;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}