{"ast":null,"code":"var _jsxFileName = \"C:\\\\_Projects\\\\DGL_ToDo\\\\react_todo_dashboard2\\\\src\\\\components\\\\PreviewPanel.jsx\",\n  _s = $RefreshSig$();\n// src/components/PreviewPanel.jsx\nimport React, { useEffect, useState } from 'react';\nimport { useMsal } from '@azure/msal-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PreviewPanel({\n  task,\n  listId\n}) {\n  _s();\n  const {\n    instance\n  } = useMsal();\n  const [steps, setSteps] = useState([]);\n  const [newStep, setNewStep] = useState('');\n  useEffect(() => {\n    const fetchSteps = async () => {\n      if (!task || !listId) return;\n      const account = instance.getActiveAccount();\n      if (!account) return;\n      const response = await instance.acquireTokenSilent({\n        scopes: ['Tasks.Read'],\n        account\n      });\n      const res = await fetch(`https://graph.microsoft.com/v1.0/me/todo/lists/${listId}/tasks/${task.id}/checklistItems`, {\n        headers: {\n          Authorization: `Bearer ${response.accessToken}`\n        }\n      });\n      const data = await res.json();\n      setSteps(data.value || []);\n    };\n    fetchSteps();\n  }, [task, listId, instance]);\n  const handleAddStep = async () => {\n    if (!newStep.trim() || !task || !listId) return;\n    const account = instance.getActiveAccount();\n    const response = await instance.acquireTokenSilent({\n      scopes: ['Tasks.ReadWrite'],\n      account\n    });\n    const res = await fetch(`https://graph.microsoft.com/v1.0/me/todo/lists/${listId}/tasks/${task.id}/checklistItems`, {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${response.accessToken}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        displayName: newStep\n      })\n    });\n    const newItem = await res.json();\n    setSteps([...steps, newItem]);\n    setNewStep('');\n  };\n  const toggleStep = async (stepId, isChecked) => {\n    const account = instance.getActiveAccount();\n    const response = await instance.acquireTokenSilent({\n      scopes: ['Tasks.ReadWrite'],\n      account\n    });\n    await fetch(`https://graph.microsoft.com/v1.0/me/todo/lists/${listId}/tasks/${task.id}/checklistItems/${stepId}`, {\n      method: 'PATCH',\n      headers: {\n        Authorization: `Bearer ${response.accessToken}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        isChecked: !isChecked\n      })\n    });\n    setSteps(prev => prev.map(step => step.id === stepId ? {\n      ...step,\n      isChecked: !isChecked\n    } : step));\n  };\n  if (!task) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Select a task to preview\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      style: {\n        fontSize: '0.8rem'\n      },\n      children: task.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      style: {\n        fontSize: '0.8rem'\n      },\n      children: steps.map(step => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: step.isChecked,\n          onChange: () => toggleStep(step.id, step.isChecked)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this), step.displayName]\n      }, step.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: newStep,\n      onChange: e => setNewStep(e.target.value),\n      onKeyDown: e => e.key === 'Enter' && handleAddStep(),\n      placeholder: \"Add step\",\n      style: {\n        width: '100%',\n        marginTop: '8px',\n        fontSize: '0.8rem'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n_s(PreviewPanel, \"H0I6j9jMieY5AAaOL4ikfZ4dbMY=\", false, function () {\n  return [useMsal];\n});\n_c = PreviewPanel;\nvar _c;\n$RefreshReg$(_c, \"PreviewPanel\");","map":{"version":3,"names":["React","useEffect","useState","useMsal","jsxDEV","_jsxDEV","PreviewPanel","task","listId","_s","instance","steps","setSteps","newStep","setNewStep","fetchSteps","account","getActiveAccount","response","acquireTokenSilent","scopes","res","fetch","id","headers","Authorization","accessToken","data","json","value","handleAddStep","trim","method","body","JSON","stringify","displayName","newItem","toggleStep","stepId","isChecked","prev","map","step","children","fileName","_jsxFileName","lineNumber","columnNumber","style","fontSize","title","type","checked","onChange","e","target","onKeyDown","key","placeholder","width","marginTop","_c","$RefreshReg$"],"sources":["C:/_Projects/DGL_ToDo/react_todo_dashboard2/src/components/PreviewPanel.jsx"],"sourcesContent":["// src/components/PreviewPanel.jsx\nimport React, { useEffect, useState } from 'react';\nimport { useMsal } from '@azure/msal-react';\n\nexport default function PreviewPanel({ task, listId }) {\n  const { instance } = useMsal();\n  const [steps, setSteps] = useState([]);\n  const [newStep, setNewStep] = useState('');\n\n  useEffect(() => {\n    const fetchSteps = async () => {\n      if (!task || !listId) return;\n\n      const account = instance.getActiveAccount();\n      if (!account) return;\n\n      const response = await instance.acquireTokenSilent({\n        scopes: ['Tasks.Read'],\n        account,\n      });\n\n      const res = await fetch(\n        `https://graph.microsoft.com/v1.0/me/todo/lists/${listId}/tasks/${task.id}/checklistItems`,\n        {\n          headers: {\n            Authorization: `Bearer ${response.accessToken}`,\n          },\n        }\n      );\n\n      const data = await res.json();\n      setSteps(data.value || []);\n    };\n\n    fetchSteps();\n  }, [task, listId, instance]);\n\n  const handleAddStep = async () => {\n    if (!newStep.trim() || !task || !listId) return;\n\n    const account = instance.getActiveAccount();\n    const response = await instance.acquireTokenSilent({\n      scopes: ['Tasks.ReadWrite'],\n      account,\n    });\n\n    const res = await fetch(\n      `https://graph.microsoft.com/v1.0/me/todo/lists/${listId}/tasks/${task.id}/checklistItems`,\n      {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${response.accessToken}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ displayName: newStep }),\n      }\n    );\n\n    const newItem = await res.json();\n    setSteps([...steps, newItem]);\n    setNewStep('');\n  };\n\n  const toggleStep = async (stepId, isChecked) => {\n    const account = instance.getActiveAccount();\n    const response = await instance.acquireTokenSilent({\n      scopes: ['Tasks.ReadWrite'],\n      account,\n    });\n\n    await fetch(\n      `https://graph.microsoft.com/v1.0/me/todo/lists/${listId}/tasks/${task.id}/checklistItems/${stepId}`,\n      {\n        method: 'PATCH',\n        headers: {\n          Authorization: `Bearer ${response.accessToken}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ isChecked: !isChecked }),\n      }\n    );\n\n    setSteps((prev) =>\n      prev.map((step) =>\n        step.id === stepId ? { ...step, isChecked: !isChecked } : step\n      )\n    );\n  };\n\n  if (!task) return <p>Select a task to preview</p>;\n\n  return (\n    <div>\n      <h4 style={{ fontSize: '0.8rem' }}>{task.title}</h4>\n      <ul style={{ fontSize: '0.8rem' }}>\n        {steps.map((step) => (\n          <li key={step.id}>\n            <input\n              type=\"checkbox\"\n              checked={step.isChecked}\n              onChange={() => toggleStep(step.id, step.isChecked)}\n            />\n            {step.displayName}\n          </li>\n        ))}\n      </ul>\n      <input\n        type=\"text\"\n        value={newStep}\n        onChange={(e) => setNewStep(e.target.value)}\n        onKeyDown={(e) => e.key === 'Enter' && handleAddStep()}\n        placeholder=\"Add step\"\n        style={{ width: '100%', marginTop: '8px', fontSize: '0.8rem' }}\n      />\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}