{"ast":null,"code":"/*! @azure/msal-browser v4.24.1 2025-09-30 */\n'use strict';\n\nimport { PlatformAuthConstants, NativeExtensionMethod } from '../../utils/BrowserConstants.mjs';\nimport { PerformanceEvents, createAuthError, AuthErrorCodes } from '@azure/msal-common/browser';\nimport { createNativeAuthError } from '../../error/NativeAuthError.mjs';\nimport { createBrowserAuthError } from '../../error/BrowserAuthError.mjs';\nimport { createNewGuid } from '../../crypto/BrowserCrypto.mjs';\nimport { nativeHandshakeTimeout, nativeExtensionNotInstalled } from '../../error/BrowserAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass PlatformAuthExtensionHandler {\n  constructor(logger, handshakeTimeoutMs, performanceClient, extensionId) {\n    this.logger = logger;\n    this.handshakeTimeoutMs = handshakeTimeoutMs;\n    this.extensionId = extensionId;\n    this.resolvers = new Map(); // Used for non-handshake messages\n    this.handshakeResolvers = new Map(); // Used for handshake messages\n    this.messageChannel = new MessageChannel();\n    this.windowListener = this.onWindowMessage.bind(this); // Window event callback doesn't have access to 'this' unless it's bound\n    this.performanceClient = performanceClient;\n    this.handshakeEvent = performanceClient.startMeasurement(PerformanceEvents.NativeMessageHandlerHandshake);\n    this.platformAuthType = PlatformAuthConstants.PLATFORM_EXTENSION_PROVIDER;\n  }\n  /**\r\n   * Sends a given message to the extension and resolves with the extension response\r\n   * @param request\r\n   */\n  async sendMessage(request) {\n    this.logger.trace(this.platformAuthType + \" - sendMessage called.\");\n    // fall back to native calls\n    const messageBody = {\n      method: NativeExtensionMethod.GetToken,\n      request: request\n    };\n    const req = {\n      channel: PlatformAuthConstants.CHANNEL_ID,\n      extensionId: this.extensionId,\n      responseId: createNewGuid(),\n      body: messageBody\n    };\n    this.logger.trace(this.platformAuthType + \" - Sending request to browser extension\");\n    this.logger.tracePii(this.platformAuthType + ` - Sending request to browser extension: ${JSON.stringify(req)}`);\n    this.messageChannel.port1.postMessage(req);\n    const response = await new Promise((resolve, reject) => {\n      this.resolvers.set(req.responseId, {\n        resolve,\n        reject\n      });\n    });\n    const validatedResponse = this.validatePlatformBrokerResponse(response);\n    return validatedResponse;\n  }\n  /**\r\n   * Returns an instance of the MessageHandler that has successfully established a connection with an extension\r\n   * @param {Logger} logger\r\n   * @param {number} handshakeTimeoutMs\r\n   * @param {IPerformanceClient} performanceClient\r\n   * @param {ICrypto} crypto\r\n   */\n  static async createProvider(logger, handshakeTimeoutMs, performanceClient) {\n    logger.trace(\"PlatformAuthExtensionHandler - createProvider called.\");\n    try {\n      const preferredProvider = new PlatformAuthExtensionHandler(logger, handshakeTimeoutMs, performanceClient, PlatformAuthConstants.PREFERRED_EXTENSION_ID);\n      await preferredProvider.sendHandshakeRequest();\n      return preferredProvider;\n    } catch (e) {\n      // If preferred extension fails for whatever reason, fallback to using any installed extension\n      const backupProvider = new PlatformAuthExtensionHandler(logger, handshakeTimeoutMs, performanceClient);\n      await backupProvider.sendHandshakeRequest();\n      return backupProvider;\n    }\n  }\n  /**\r\n   * Send handshake request helper.\r\n   */\n  async sendHandshakeRequest() {\n    this.logger.trace(this.platformAuthType + \" - sendHandshakeRequest called.\");\n    // Register this event listener before sending handshake\n    window.addEventListener(\"message\", this.windowListener, false); // false is important, because content script message processing should work first\n    const req = {\n      channel: PlatformAuthConstants.CHANNEL_ID,\n      extensionId: this.extensionId,\n      responseId: createNewGuid(),\n      body: {\n        method: NativeExtensionMethod.HandshakeRequest\n      }\n    };\n    this.handshakeEvent.add({\n      extensionId: this.extensionId,\n      extensionHandshakeTimeoutMs: this.handshakeTimeoutMs\n    });\n    this.messageChannel.port1.onmessage = event => {\n      this.onChannelMessage(event);\n    };\n    window.postMessage(req, window.origin, [this.messageChannel.port2]);\n    return new Promise((resolve, reject) => {\n      this.handshakeResolvers.set(req.responseId, {\n        resolve,\n        reject\n      });\n      this.timeoutId = window.setTimeout(() => {\n        /*\r\n         * Throw an error if neither HandshakeResponse nor original Handshake request are received in a reasonable timeframe.\r\n         * This typically suggests an event handler stopped propagation of the Handshake request but did not respond to it on the MessageChannel port\r\n         */\n        window.removeEventListener(\"message\", this.windowListener, false);\n        this.messageChannel.port1.close();\n        this.messageChannel.port2.close();\n        this.handshakeEvent.end({\n          extensionHandshakeTimedOut: true,\n          success: false\n        });\n        reject(createBrowserAuthError(nativeHandshakeTimeout));\n        this.handshakeResolvers.delete(req.responseId);\n      }, this.handshakeTimeoutMs); // Use a reasonable timeout in milliseconds here\n    });\n  }\n  /**\r\n   * Invoked when a message is posted to the window. If a handshake request is received it means the extension is not installed.\r\n   * @param event\r\n   */\n  onWindowMessage(event) {\n    this.logger.trace(this.platformAuthType + \" - onWindowMessage called\");\n    // We only accept messages from ourselves\n    if (event.source !== window) {\n      return;\n    }\n    const request = event.data;\n    if (!request.channel || request.channel !== PlatformAuthConstants.CHANNEL_ID) {\n      return;\n    }\n    if (request.extensionId && request.extensionId !== this.extensionId) {\n      return;\n    }\n    if (request.body.method === NativeExtensionMethod.HandshakeRequest) {\n      const handshakeResolver = this.handshakeResolvers.get(request.responseId);\n      /*\r\n       * Filter out responses with no matched resolvers sooner to keep channel ports open while waiting for\r\n       * the proper response.\r\n       */\n      if (!handshakeResolver) {\n        this.logger.trace(this.platformAuthType + `.onWindowMessage - resolver can't be found for request ${request.responseId}`);\n        return;\n      }\n      // If we receive this message back it means no extension intercepted the request, meaning no extension supporting handshake protocol is installed\n      this.logger.verbose(request.extensionId ? `Extension with id: ${request.extensionId} not installed` : \"No extension installed\");\n      clearTimeout(this.timeoutId);\n      this.messageChannel.port1.close();\n      this.messageChannel.port2.close();\n      window.removeEventListener(\"message\", this.windowListener, false);\n      this.handshakeEvent.end({\n        success: false,\n        extensionInstalled: false\n      });\n      handshakeResolver.reject(createBrowserAuthError(nativeExtensionNotInstalled));\n    }\n  }\n  /**\r\n   * Invoked when a message is received from the extension on the MessageChannel port\r\n   * @param event\r\n   */\n  onChannelMessage(event) {\n    this.logger.trace(this.platformAuthType + \" - onChannelMessage called.\");\n    const request = event.data;\n    const resolver = this.resolvers.get(request.responseId);\n    const handshakeResolver = this.handshakeResolvers.get(request.responseId);\n    try {\n      const method = request.body.method;\n      if (method === NativeExtensionMethod.Response) {\n        if (!resolver) {\n          return;\n        }\n        const response = request.body.response;\n        this.logger.trace(this.platformAuthType + \" - Received response from browser extension\");\n        this.logger.tracePii(this.platformAuthType + ` - Received response from browser extension: ${JSON.stringify(response)}`);\n        if (response.status !== \"Success\") {\n          resolver.reject(createNativeAuthError(response.code, response.description, response.ext));\n        } else if (response.result) {\n          if (response.result[\"code\"] && response.result[\"description\"]) {\n            resolver.reject(createNativeAuthError(response.result[\"code\"], response.result[\"description\"], response.result[\"ext\"]));\n          } else {\n            resolver.resolve(response.result);\n          }\n        } else {\n          throw createAuthError(AuthErrorCodes.unexpectedError, \"Event does not contain result.\");\n        }\n        this.resolvers.delete(request.responseId);\n      } else if (method === NativeExtensionMethod.HandshakeResponse) {\n        if (!handshakeResolver) {\n          this.logger.trace(this.platformAuthType + `.onChannelMessage - resolver can't be found for request ${request.responseId}`);\n          return;\n        }\n        clearTimeout(this.timeoutId); // Clear setTimeout\n        window.removeEventListener(\"message\", this.windowListener, false); // Remove 'No extension' listener\n        this.extensionId = request.extensionId;\n        this.extensionVersion = request.body.version;\n        this.logger.verbose(this.platformAuthType + ` - Received HandshakeResponse from extension: ${this.extensionId}`);\n        this.handshakeEvent.end({\n          extensionInstalled: true,\n          success: true\n        });\n        handshakeResolver.resolve();\n        this.handshakeResolvers.delete(request.responseId);\n      }\n      // Do nothing if method is not Response or HandshakeResponse\n    } catch (err) {\n      this.logger.error(\"Error parsing response from WAM Extension\");\n      this.logger.errorPii(`Error parsing response from WAM Extension: ${err}`);\n      this.logger.errorPii(`Unable to parse ${event}`);\n      if (resolver) {\n        resolver.reject(err);\n      } else if (handshakeResolver) {\n        handshakeResolver.reject(err);\n      }\n    }\n  }\n  /**\r\n   * Validates native platform response before processing\r\n   * @param response\r\n   */\n  validatePlatformBrokerResponse(response) {\n    if (response.hasOwnProperty(\"access_token\") && response.hasOwnProperty(\"id_token\") && response.hasOwnProperty(\"client_info\") && response.hasOwnProperty(\"account\") && response.hasOwnProperty(\"scope\") && response.hasOwnProperty(\"expires_in\")) {\n      return response;\n    } else {\n      throw createAuthError(AuthErrorCodes.unexpectedError, \"Response missing expected properties.\");\n    }\n  }\n  /**\r\n   * Returns the Id for the browser extension this handler is communicating with\r\n   * @returns\r\n   */\n  getExtensionId() {\n    return this.extensionId;\n  }\n  /**\r\n   * Returns the version for the browser extension this handler is communicating with\r\n   * @returns\r\n   */\n  getExtensionVersion() {\n    return this.extensionVersion;\n  }\n  getExtensionName() {\n    return this.getExtensionId() === PlatformAuthConstants.PREFERRED_EXTENSION_ID ? \"chrome\" : this.getExtensionId()?.length ? \"unknown\" : undefined;\n  }\n}\nexport { PlatformAuthExtensionHandler };","map":{"version":3,"names":["PlatformAuthExtensionHandler","constructor","logger","handshakeTimeoutMs","performanceClient","extensionId","resolvers","Map","handshakeResolvers","messageChannel","MessageChannel","windowListener","onWindowMessage","bind","handshakeEvent","startMeasurement","PerformanceEvents","NativeMessageHandlerHandshake","platformAuthType","PlatformAuthConstants","PLATFORM_EXTENSION_PROVIDER","sendMessage","request","trace","messageBody","method","NativeExtensionMethod","GetToken","req","channel","CHANNEL_ID","responseId","createNewGuid","body","tracePii","JSON","stringify","port1","postMessage","response","Promise","resolve","reject","set","validatedResponse","validatePlatformBrokerResponse","createProvider","preferredProvider","PREFERRED_EXTENSION_ID","sendHandshakeRequest","e","backupProvider","window","addEventListener","HandshakeRequest","add","extensionHandshakeTimeoutMs","onmessage","event","onChannelMessage","origin","port2","timeoutId","setTimeout","removeEventListener","close","end","extensionHandshakeTimedOut","success","createBrowserAuthError","nativeHandshakeTimeout","delete","source","data","handshakeResolver","get","verbose","clearTimeout","extensionInstalled","nativeExtensionNotInstalled","resolver","Response","status","createNativeAuthError","code","description","ext","result","createAuthError","AuthErrorCodes","unexpectedError","HandshakeResponse","extensionVersion","version","err","error","errorPii","hasOwnProperty","getExtensionId","getExtensionVersion","getExtensionName","length","undefined"],"sources":["../../../src/broker/nativeBroker/PlatformAuthExtensionHandler.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}