{"ast":null,"code":"/*! @azure/msal-browser v4.24.1 2025-09-30 */\n'use strict';\n\nimport _objectSpread from \"C:/_Projects/DGL_ToDo/react_todo_dashboard2/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"C:/_Projects/DGL_ToDo/react_todo_dashboard2/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"accountId\", \"clientId\", \"authority\", \"scope\", \"redirectUri\", \"correlationId\", \"state\", \"storeInCache\", \"embeddedClientId\", \"extraParameters\"];\nimport { createAuthError, AuthErrorCodes } from '@azure/msal-common/browser';\nimport { PlatformAuthConstants } from '../../utils/BrowserConstants.mjs';\nimport { createNativeAuthError } from '../../error/NativeAuthError.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass PlatformAuthDOMHandler {\n  constructor(logger, performanceClient, correlationId) {\n    this.logger = logger;\n    this.performanceClient = performanceClient;\n    this.correlationId = correlationId;\n    this.platformAuthType = PlatformAuthConstants.PLATFORM_DOM_PROVIDER;\n  }\n  static async createProvider(logger, performanceClient, correlationId) {\n    var _window$navigator;\n    logger.trace(\"PlatformAuthDOMHandler: createProvider called\");\n    // @ts-ignore\n    if ((_window$navigator = window.navigator) !== null && _window$navigator !== void 0 && _window$navigator.platformAuthentication) {\n      const supportedContracts =\n      // @ts-ignore\n      await window.navigator.platformAuthentication.getSupportedContracts(PlatformAuthConstants.MICROSOFT_ENTRA_BROKERID);\n      if (supportedContracts !== null && supportedContracts !== void 0 && supportedContracts.includes(PlatformAuthConstants.PLATFORM_DOM_APIS)) {\n        logger.trace(\"Platform auth api available in DOM\");\n        return new PlatformAuthDOMHandler(logger, performanceClient, correlationId);\n      }\n    }\n    return undefined;\n  }\n  /**\r\n   * Returns the Id for the broker extension this handler is communicating with\r\n   * @returns\r\n   */\n  getExtensionId() {\n    return PlatformAuthConstants.MICROSOFT_ENTRA_BROKERID;\n  }\n  getExtensionVersion() {\n    return \"\";\n  }\n  getExtensionName() {\n    return PlatformAuthConstants.DOM_API_NAME;\n  }\n  /**\r\n   * Send token request to platform broker via browser DOM API\r\n   * @param request\r\n   * @returns\r\n   */\n  async sendMessage(request) {\n    this.logger.trace(this.platformAuthType + \" - Sending request to browser DOM API\");\n    try {\n      const platformDOMRequest = this.initializePlatformDOMRequest(request);\n      const response =\n      // @ts-ignore\n      await window.navigator.platformAuthentication.executeGetToken(platformDOMRequest);\n      return this.validatePlatformBrokerResponse(response);\n    } catch (e) {\n      this.logger.error(this.platformAuthType + \" - executeGetToken DOM API error\");\n      throw e;\n    }\n  }\n  initializePlatformDOMRequest(request) {\n    this.logger.trace(this.platformAuthType + \" - initializeNativeDOMRequest called\");\n    const {\n        accountId,\n        clientId,\n        authority,\n        scope,\n        redirectUri,\n        correlationId,\n        state,\n        storeInCache,\n        embeddedClientId,\n        extraParameters\n      } = request,\n      remainingProperties = _objectWithoutProperties(request, _excluded);\n    const validExtraParameters = this.getDOMExtraParams(remainingProperties);\n    const platformDOMRequest = {\n      accountId: accountId,\n      brokerId: this.getExtensionId(),\n      authority: authority,\n      clientId: clientId,\n      correlationId: correlationId || this.correlationId,\n      extraParameters: _objectSpread(_objectSpread({}, extraParameters), validExtraParameters),\n      isSecurityTokenService: false,\n      redirectUri: redirectUri,\n      scope: scope,\n      state: state,\n      storeInCache: storeInCache,\n      embeddedClientId: embeddedClientId\n    };\n    return platformDOMRequest;\n  }\n  validatePlatformBrokerResponse(response) {\n    if (response.hasOwnProperty(\"isSuccess\")) {\n      if (response.hasOwnProperty(\"accessToken\") && response.hasOwnProperty(\"idToken\") && response.hasOwnProperty(\"clientInfo\") && response.hasOwnProperty(\"account\") && response.hasOwnProperty(\"scopes\") && response.hasOwnProperty(\"expiresIn\")) {\n        this.logger.trace(this.platformAuthType + \" - platform broker returned successful and valid response\");\n        return this.convertToPlatformBrokerResponse(response);\n      } else if (response.hasOwnProperty(\"error\")) {\n        const errorResponse = response;\n        if (errorResponse.isSuccess === false && errorResponse.error && errorResponse.error.code) {\n          this.logger.trace(this.platformAuthType + \" - platform broker returned error response\");\n          throw createNativeAuthError(errorResponse.error.code, errorResponse.error.description, {\n            error: parseInt(errorResponse.error.errorCode),\n            protocol_error: errorResponse.error.protocolError,\n            status: errorResponse.error.status,\n            properties: errorResponse.error.properties\n          });\n        }\n      }\n    }\n    throw createAuthError(AuthErrorCodes.unexpectedError, \"Response missing expected properties.\");\n  }\n  convertToPlatformBrokerResponse(response) {\n    var _response$extendedLif;\n    this.logger.trace(this.platformAuthType + \" - convertToNativeResponse called\");\n    const nativeResponse = {\n      access_token: response.accessToken,\n      id_token: response.idToken,\n      client_info: response.clientInfo,\n      account: response.account,\n      expires_in: response.expiresIn,\n      scope: response.scopes,\n      state: response.state || \"\",\n      properties: response.properties || {},\n      extendedLifetimeToken: (_response$extendedLif = response.extendedLifetimeToken) !== null && _response$extendedLif !== void 0 ? _response$extendedLif : false,\n      shr: response.proofOfPossessionPayload\n    };\n    return nativeResponse;\n  }\n  getDOMExtraParams(extraParameters) {\n    const stringifiedParams = Object.entries(extraParameters).reduce((record, _ref) => {\n      let [key, value] = _ref;\n      record[key] = String(value);\n      return record;\n    }, {});\n    const validExtraParams = _objectSpread({}, stringifiedParams);\n    return validExtraParams;\n  }\n}\nexport { PlatformAuthDOMHandler };","map":{"version":3,"names":["PlatformAuthDOMHandler","constructor","logger","performanceClient","correlationId","platformAuthType","PlatformAuthConstants","PLATFORM_DOM_PROVIDER","createProvider","_window$navigator","trace","window","navigator","platformAuthentication","supportedContracts","getSupportedContracts","MICROSOFT_ENTRA_BROKERID","includes","PLATFORM_DOM_APIS","undefined","getExtensionId","getExtensionVersion","getExtensionName","DOM_API_NAME","sendMessage","request","platformDOMRequest","initializePlatformDOMRequest","response","executeGetToken","validatePlatformBrokerResponse","e","error","accountId","clientId","authority","scope","redirectUri","state","storeInCache","embeddedClientId","extraParameters","remainingProperties","_objectWithoutProperties","_excluded","validExtraParameters","getDOMExtraParams","brokerId","_objectSpread","isSecurityTokenService","hasOwnProperty","convertToPlatformBrokerResponse","errorResponse","isSuccess","code","createNativeAuthError","description","parseInt","errorCode","protocol_error","protocolError","status","properties","createAuthError","AuthErrorCodes","unexpectedError","_response$extendedLif","nativeResponse","access_token","accessToken","id_token","idToken","client_info","clientInfo","account","expires_in","expiresIn","scopes","extendedLifetimeToken","shr","proofOfPossessionPayload","stringifiedParams","Object","entries","reduce","record","_ref","key","value","String","validExtraParams"],"sources":["C:\\_Projects\\DGL_ToDo\\react_todo_dashboard2\\node_modules\\@azure\\msal-browser\\src\\broker\\nativeBroker\\PlatformAuthDOMHandler.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    Logger,\n    createAuthError,\n    AuthErrorCodes,\n    IPerformanceClient,\n    StringDict,\n} from \"@azure/msal-common/browser\";\nimport {\n    DOMExtraParameters,\n    PlatformAuthRequest,\n    PlatformDOMTokenRequest,\n} from \"./PlatformAuthRequest.js\";\nimport { PlatformAuthConstants } from \"../../utils/BrowserConstants.js\";\nimport {\n    PlatformAuthResponse,\n    PlatformDOMTokenResponse,\n} from \"./PlatformAuthResponse.js\";\nimport { createNativeAuthError } from \"../../error/NativeAuthError.js\";\nimport { IPlatformAuthHandler } from \"./IPlatformAuthHandler.js\";\n\nexport class PlatformAuthDOMHandler implements IPlatformAuthHandler {\n    protected logger: Logger;\n    protected performanceClient: IPerformanceClient;\n    protected correlationId: string;\n    platformAuthType: string;\n\n    constructor(\n        logger: Logger,\n        performanceClient: IPerformanceClient,\n        correlationId: string\n    ) {\n        this.logger = logger;\n        this.performanceClient = performanceClient;\n        this.correlationId = correlationId;\n        this.platformAuthType = PlatformAuthConstants.PLATFORM_DOM_PROVIDER;\n    }\n\n    static async createProvider(\n        logger: Logger,\n        performanceClient: IPerformanceClient,\n        correlationId: string\n    ): Promise<PlatformAuthDOMHandler | undefined> {\n        logger.trace(\"PlatformAuthDOMHandler: createProvider called\");\n\n        // @ts-ignore\n        if (window.navigator?.platformAuthentication) {\n            const supportedContracts =\n                // @ts-ignore\n                await window.navigator.platformAuthentication.getSupportedContracts(\n                    PlatformAuthConstants.MICROSOFT_ENTRA_BROKERID\n                );\n            if (\n                supportedContracts?.includes(\n                    PlatformAuthConstants.PLATFORM_DOM_APIS\n                )\n            ) {\n                logger.trace(\"Platform auth api available in DOM\");\n                return new PlatformAuthDOMHandler(\n                    logger,\n                    performanceClient,\n                    correlationId\n                );\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Returns the Id for the broker extension this handler is communicating with\n     * @returns\n     */\n    getExtensionId(): string {\n        return PlatformAuthConstants.MICROSOFT_ENTRA_BROKERID;\n    }\n\n    getExtensionVersion(): string | undefined {\n        return \"\";\n    }\n\n    getExtensionName(): string | undefined {\n        return PlatformAuthConstants.DOM_API_NAME;\n    }\n\n    /**\n     * Send token request to platform broker via browser DOM API\n     * @param request\n     * @returns\n     */\n    async sendMessage(\n        request: PlatformAuthRequest\n    ): Promise<PlatformAuthResponse> {\n        this.logger.trace(\n            this.platformAuthType + \" - Sending request to browser DOM API\"\n        );\n\n        try {\n            const platformDOMRequest: PlatformDOMTokenRequest =\n                this.initializePlatformDOMRequest(request);\n            const response: object =\n                // @ts-ignore\n                await window.navigator.platformAuthentication.executeGetToken(\n                    platformDOMRequest\n                );\n            return this.validatePlatformBrokerResponse(response);\n        } catch (e) {\n            this.logger.error(\n                this.platformAuthType + \" - executeGetToken DOM API error\"\n            );\n            throw e;\n        }\n    }\n\n    private initializePlatformDOMRequest(\n        request: PlatformAuthRequest\n    ): PlatformDOMTokenRequest {\n        this.logger.trace(\n            this.platformAuthType + \" - initializeNativeDOMRequest called\"\n        );\n\n        const {\n            accountId,\n            clientId,\n            authority,\n            scope,\n            redirectUri,\n            correlationId,\n            state,\n            storeInCache,\n            embeddedClientId,\n            extraParameters,\n            ...remainingProperties\n        } = request;\n\n        const validExtraParameters: DOMExtraParameters =\n            this.getDOMExtraParams(remainingProperties);\n\n        const platformDOMRequest: PlatformDOMTokenRequest = {\n            accountId: accountId,\n            brokerId: this.getExtensionId(),\n            authority: authority,\n            clientId: clientId,\n            correlationId: correlationId || this.correlationId,\n            extraParameters: { ...extraParameters, ...validExtraParameters },\n            isSecurityTokenService: false,\n            redirectUri: redirectUri,\n            scope: scope,\n            state: state,\n            storeInCache: storeInCache,\n            embeddedClientId: embeddedClientId,\n        };\n\n        return platformDOMRequest;\n    }\n\n    private validatePlatformBrokerResponse(\n        response: object\n    ): PlatformAuthResponse {\n        if (response.hasOwnProperty(\"isSuccess\")) {\n            if (\n                response.hasOwnProperty(\"accessToken\") &&\n                response.hasOwnProperty(\"idToken\") &&\n                response.hasOwnProperty(\"clientInfo\") &&\n                response.hasOwnProperty(\"account\") &&\n                response.hasOwnProperty(\"scopes\") &&\n                response.hasOwnProperty(\"expiresIn\")\n            ) {\n                this.logger.trace(\n                    this.platformAuthType +\n                        \" - platform broker returned successful and valid response\"\n                );\n                return this.convertToPlatformBrokerResponse(\n                    response as PlatformDOMTokenResponse\n                );\n            } else if (response.hasOwnProperty(\"error\")) {\n                const errorResponse = response as PlatformDOMTokenResponse;\n                if (\n                    errorResponse.isSuccess === false &&\n                    errorResponse.error &&\n                    errorResponse.error.code\n                ) {\n                    this.logger.trace(\n                        this.platformAuthType +\n                            \" - platform broker returned error response\"\n                    );\n                    throw createNativeAuthError(\n                        errorResponse.error.code,\n                        errorResponse.error.description,\n                        {\n                            error: parseInt(errorResponse.error.errorCode),\n                            protocol_error: errorResponse.error.protocolError,\n                            status: errorResponse.error.status,\n                            properties: errorResponse.error.properties,\n                        }\n                    );\n                }\n            }\n        }\n        throw createAuthError(\n            AuthErrorCodes.unexpectedError,\n            \"Response missing expected properties.\"\n        );\n    }\n\n    private convertToPlatformBrokerResponse(\n        response: PlatformDOMTokenResponse\n    ): PlatformAuthResponse {\n        this.logger.trace(\n            this.platformAuthType + \" - convertToNativeResponse called\"\n        );\n        const nativeResponse: PlatformAuthResponse = {\n            access_token: response.accessToken,\n            id_token: response.idToken,\n            client_info: response.clientInfo,\n            account: response.account,\n            expires_in: response.expiresIn,\n            scope: response.scopes,\n            state: response.state || \"\",\n            properties: response.properties || {},\n            extendedLifetimeToken: response.extendedLifetimeToken ?? false,\n            shr: response.proofOfPossessionPayload,\n        };\n\n        return nativeResponse;\n    }\n\n    private getDOMExtraParams(\n        extraParameters: Record<string, unknown>\n    ): DOMExtraParameters {\n        const stringifiedParams = Object.entries(extraParameters).reduce(\n            (record, [key, value]) => {\n                record[key] = String(value);\n                return record;\n            },\n            {} as StringDict\n        );\n\n        const validExtraParams: DOMExtraParameters = {\n            ...stringifiedParams,\n        };\n\n        return validExtraParams;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}