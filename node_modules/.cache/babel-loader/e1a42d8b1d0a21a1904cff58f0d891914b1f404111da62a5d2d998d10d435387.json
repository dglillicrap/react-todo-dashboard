{"ast":null,"code":"// src/hooks/useTasks.js\nimport{useMsal}from'@azure/msal-react';import{useEffect,useState}from'react';const sleep=ms=>new Promise(r=>setTimeout(r,ms));const useTasks=function(listId){let refreshKey=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;const{instance,accounts,inProgress}=useMsal();const[tasks,setTasks]=useState([]);const[loading,setLoading]=useState(true);useEffect(()=>{// Nothing to do if no list is selected\nif(!listId){setTasks([]);setLoading(false);return;}// Wait until MSAL is ready and an account is present\nif(inProgress!=='none'||accounts.length===0){setLoading(true);return;}let isMounted=true;const abort=new AbortController();const getToken=async function(){let forceRefresh=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;let account=instance.getActiveAccount()||accounts[0];if(!account)return null;if(!instance.getActiveAccount())instance.setActiveAccount(account);try{return await instance.acquireTokenSilent({scopes:['Tasks.Read'],account,forceRefresh});}catch(e){// Try once more with forceRefresh if not already\nif(!forceRefresh){try{return await instance.acquireTokenSilent({scopes:['Tasks.Read'],account,forceRefresh:true});}catch(e2){console.error('acquireTokenSilent failed (forceRefresh):',e2);return null;}}console.error('acquireTokenSilent failed:',e);return null;}};const fetchTasksWithRetry=async()=>{setLoading(true);let tokenResp=await getToken(false);if(!tokenResp){if(isMounted)setLoading(false);return;}const url=\"https://graph.microsoft.com/v1.0/me/todo/lists/\".concat(listId,\"/tasks\");let attempt=0;while(attempt<3&&isMounted){try{const res=await fetch(url,{method:'GET',headers:{Authorization:\"Bearer \".concat(tokenResp.accessToken),'Cache-Control':'no-cache',Pragma:'no-cache'},signal:abort.signal});if(res.ok){var _data$value;const data=await res.json();if(isMounted)setTasks((_data$value=data===null||data===void 0?void 0:data.value)!==null&&_data$value!==void 0?_data$value:[]);break;}// Handle retriable statuses\nif(res.status===401||res.status===403){// Try to refresh token once and retry\ntokenResp=await getToken(true);if(!tokenResp)throw new Error(\"Auth failed (\".concat(res.status,\")\"));}else if(res.status===429||res.status>=500){// Backoff: 300ms, 900ms\nawait sleep(300*Math.pow(3,attempt));}else{// Non-retriable\nconst text=await res.text();console.error('Graph /tasks error',res.status,text);break;}}catch(err){if((err===null||err===void 0?void 0:err.name)==='AbortError')break;// unmounted / re-run\n// Backoff on generic network errors\nawait sleep(300*Math.pow(3,attempt));}attempt+=1;}if(isMounted)setLoading(false);};fetchTasksWithRetry();return()=>{isMounted=false;abort.abort();};// Re-run when listId changes, a global refresh is requested,\n// or when MSAL becomes ready.\n},[listId,refreshKey,accounts,inProgress,instance]);return{tasks,loading};};export default useTasks;","map":{"version":3,"names":["useMsal","useEffect","useState","sleep","ms","Promise","r","setTimeout","useTasks","listId","refreshKey","arguments","length","undefined","instance","accounts","inProgress","tasks","setTasks","loading","setLoading","isMounted","abort","AbortController","getToken","forceRefresh","account","getActiveAccount","setActiveAccount","acquireTokenSilent","scopes","e","e2","console","error","fetchTasksWithRetry","tokenResp","url","concat","attempt","res","fetch","method","headers","Authorization","accessToken","Pragma","signal","ok","_data$value","data","json","value","status","Error","Math","pow","text","err","name"],"sources":["C:/_Projects/DGL_ToDo/react_todo_dashboard2/src/hooks/useTasks.js"],"sourcesContent":["// src/hooks/useTasks.js\r\nimport { useMsal } from '@azure/msal-react';\r\nimport { useEffect, useState } from 'react';\r\n\r\nconst sleep = (ms) => new Promise((r) => setTimeout(r, ms));\r\n\r\nconst useTasks = (listId, refreshKey = 0) => {\r\n  const { instance, accounts, inProgress } = useMsal();\r\n  const [tasks, setTasks] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Nothing to do if no list is selected\r\n    if (!listId) {\r\n      setTasks([]);\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    // Wait until MSAL is ready and an account is present\r\n    if (inProgress !== 'none' || accounts.length === 0) {\r\n      setLoading(true);\r\n      return;\r\n    }\r\n\r\n    let isMounted = true;\r\n    const abort = new AbortController();\r\n\r\n    const getToken = async (forceRefresh = false) => {\r\n      let account = instance.getActiveAccount() || accounts[0];\r\n      if (!account) return null;\r\n      if (!instance.getActiveAccount()) instance.setActiveAccount(account);\r\n\r\n      try {\r\n        return await instance.acquireTokenSilent({\r\n          scopes: ['Tasks.Read'],\r\n          account,\r\n          forceRefresh,\r\n        });\r\n      } catch (e) {\r\n        // Try once more with forceRefresh if not already\r\n        if (!forceRefresh) {\r\n          try {\r\n            return await instance.acquireTokenSilent({\r\n              scopes: ['Tasks.Read'],\r\n              account,\r\n              forceRefresh: true,\r\n            });\r\n          } catch (e2) {\r\n            console.error('acquireTokenSilent failed (forceRefresh):', e2);\r\n            return null;\r\n          }\r\n        }\r\n        console.error('acquireTokenSilent failed:', e);\r\n        return null;\r\n      }\r\n    };\r\n\r\n    const fetchTasksWithRetry = async () => {\r\n      setLoading(true);\r\n\r\n      let tokenResp = await getToken(false);\r\n      if (!tokenResp) {\r\n        if (isMounted) setLoading(false);\r\n        return;\r\n      }\r\n\r\n      const url = `https://graph.microsoft.com/v1.0/me/todo/lists/${listId}/tasks`;\r\n      let attempt = 0;\r\n\r\n      while (attempt < 3 && isMounted) {\r\n        try {\r\n          const res = await fetch(url, {\r\n            method: 'GET',\r\n            headers: {\r\n              Authorization: `Bearer ${tokenResp.accessToken}`,\r\n              'Cache-Control': 'no-cache',\r\n              Pragma: 'no-cache',\r\n            },\r\n            signal: abort.signal,\r\n          });\r\n\r\n          if (res.ok) {\r\n            const data = await res.json();\r\n            if (isMounted) setTasks(data?.value ?? []);\r\n            break;\r\n          }\r\n\r\n          // Handle retriable statuses\r\n          if (res.status === 401 || res.status === 403) {\r\n            // Try to refresh token once and retry\r\n            tokenResp = await getToken(true);\r\n            if (!tokenResp) throw new Error(`Auth failed (${res.status})`);\r\n          } else if (res.status === 429 || res.status >= 500) {\r\n            // Backoff: 300ms, 900ms\r\n            await sleep(300 * Math.pow(3, attempt));\r\n          } else {\r\n            // Non-retriable\r\n            const text = await res.text();\r\n            console.error('Graph /tasks error', res.status, text);\r\n            break;\r\n          }\r\n        } catch (err) {\r\n          if (err?.name === 'AbortError') break; // unmounted / re-run\r\n          // Backoff on generic network errors\r\n          await sleep(300 * Math.pow(3, attempt));\r\n        }\r\n        attempt += 1;\r\n      }\r\n\r\n      if (isMounted) setLoading(false);\r\n    };\r\n\r\n    fetchTasksWithRetry();\r\n\r\n    return () => {\r\n      isMounted = false;\r\n      abort.abort();\r\n    };\r\n    // Re-run when listId changes, a global refresh is requested,\r\n    // or when MSAL becomes ready.\r\n  }, [listId, refreshKey, accounts, inProgress, instance]);\r\n\r\n  return { tasks, loading };\r\n};\r\n\r\nexport default useTasks;"],"mappings":"AAAA;AACA,OAASA,OAAO,KAAQ,mBAAmB,CAC3C,OAASC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAE3C,KAAM,CAAAC,KAAK,CAAIC,EAAE,EAAK,GAAI,CAAAC,OAAO,CAAEC,CAAC,EAAKC,UAAU,CAACD,CAAC,CAAEF,EAAE,CAAC,CAAC,CAE3D,KAAM,CAAAI,QAAQ,CAAG,QAAAA,CAACC,MAAM,CAAqB,IAAnB,CAAAC,UAAU,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CACtC,KAAM,CAAEG,QAAQ,CAAEC,QAAQ,CAAEC,UAAW,CAAC,CAAGhB,OAAO,CAAC,CAAC,CACpD,KAAM,CAACiB,KAAK,CAAEC,QAAQ,CAAC,CAAGhB,QAAQ,CAAC,EAAE,CAAC,CACtC,KAAM,CAACiB,OAAO,CAAEC,UAAU,CAAC,CAAGlB,QAAQ,CAAC,IAAI,CAAC,CAE5CD,SAAS,CAAC,IAAM,CACd;AACA,GAAI,CAACQ,MAAM,CAAE,CACXS,QAAQ,CAAC,EAAE,CAAC,CACZE,UAAU,CAAC,KAAK,CAAC,CACjB,OACF,CAEA;AACA,GAAIJ,UAAU,GAAK,MAAM,EAAID,QAAQ,CAACH,MAAM,GAAK,CAAC,CAAE,CAClDQ,UAAU,CAAC,IAAI,CAAC,CAChB,OACF,CAEA,GAAI,CAAAC,SAAS,CAAG,IAAI,CACpB,KAAM,CAAAC,KAAK,CAAG,GAAI,CAAAC,eAAe,CAAC,CAAC,CAEnC,KAAM,CAAAC,QAAQ,CAAG,cAAAA,CAAA,CAAgC,IAAzB,CAAAC,YAAY,CAAAd,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,KAAK,CAC1C,GAAI,CAAAe,OAAO,CAAGZ,QAAQ,CAACa,gBAAgB,CAAC,CAAC,EAAIZ,QAAQ,CAAC,CAAC,CAAC,CACxD,GAAI,CAACW,OAAO,CAAE,MAAO,KAAI,CACzB,GAAI,CAACZ,QAAQ,CAACa,gBAAgB,CAAC,CAAC,CAAEb,QAAQ,CAACc,gBAAgB,CAACF,OAAO,CAAC,CAEpE,GAAI,CACF,MAAO,MAAM,CAAAZ,QAAQ,CAACe,kBAAkB,CAAC,CACvCC,MAAM,CAAE,CAAC,YAAY,CAAC,CACtBJ,OAAO,CACPD,YACF,CAAC,CAAC,CACJ,CAAE,MAAOM,CAAC,CAAE,CACV;AACA,GAAI,CAACN,YAAY,CAAE,CACjB,GAAI,CACF,MAAO,MAAM,CAAAX,QAAQ,CAACe,kBAAkB,CAAC,CACvCC,MAAM,CAAE,CAAC,YAAY,CAAC,CACtBJ,OAAO,CACPD,YAAY,CAAE,IAChB,CAAC,CAAC,CACJ,CAAE,MAAOO,EAAE,CAAE,CACXC,OAAO,CAACC,KAAK,CAAC,2CAA2C,CAAEF,EAAE,CAAC,CAC9D,MAAO,KAAI,CACb,CACF,CACAC,OAAO,CAACC,KAAK,CAAC,4BAA4B,CAAEH,CAAC,CAAC,CAC9C,MAAO,KAAI,CACb,CACF,CAAC,CAED,KAAM,CAAAI,mBAAmB,CAAG,KAAAA,CAAA,GAAY,CACtCf,UAAU,CAAC,IAAI,CAAC,CAEhB,GAAI,CAAAgB,SAAS,CAAG,KAAM,CAAAZ,QAAQ,CAAC,KAAK,CAAC,CACrC,GAAI,CAACY,SAAS,CAAE,CACd,GAAIf,SAAS,CAAED,UAAU,CAAC,KAAK,CAAC,CAChC,OACF,CAEA,KAAM,CAAAiB,GAAG,mDAAAC,MAAA,CAAqD7B,MAAM,UAAQ,CAC5E,GAAI,CAAA8B,OAAO,CAAG,CAAC,CAEf,MAAOA,OAAO,CAAG,CAAC,EAAIlB,SAAS,CAAE,CAC/B,GAAI,CACF,KAAM,CAAAmB,GAAG,CAAG,KAAM,CAAAC,KAAK,CAACJ,GAAG,CAAE,CAC3BK,MAAM,CAAE,KAAK,CACbC,OAAO,CAAE,CACPC,aAAa,WAAAN,MAAA,CAAYF,SAAS,CAACS,WAAW,CAAE,CAChD,eAAe,CAAE,UAAU,CAC3BC,MAAM,CAAE,UACV,CAAC,CACDC,MAAM,CAAEzB,KAAK,CAACyB,MAChB,CAAC,CAAC,CAEF,GAAIP,GAAG,CAACQ,EAAE,CAAE,KAAAC,WAAA,CACV,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAV,GAAG,CAACW,IAAI,CAAC,CAAC,CAC7B,GAAI9B,SAAS,CAAEH,QAAQ,EAAA+B,WAAA,CAACC,IAAI,SAAJA,IAAI,iBAAJA,IAAI,CAAEE,KAAK,UAAAH,WAAA,UAAAA,WAAA,CAAI,EAAE,CAAC,CAC1C,MACF,CAEA;AACA,GAAIT,GAAG,CAACa,MAAM,GAAK,GAAG,EAAIb,GAAG,CAACa,MAAM,GAAK,GAAG,CAAE,CAC5C;AACAjB,SAAS,CAAG,KAAM,CAAAZ,QAAQ,CAAC,IAAI,CAAC,CAChC,GAAI,CAACY,SAAS,CAAE,KAAM,IAAI,CAAAkB,KAAK,iBAAAhB,MAAA,CAAiBE,GAAG,CAACa,MAAM,KAAG,CAAC,CAChE,CAAC,IAAM,IAAIb,GAAG,CAACa,MAAM,GAAK,GAAG,EAAIb,GAAG,CAACa,MAAM,EAAI,GAAG,CAAE,CAClD;AACA,KAAM,CAAAlD,KAAK,CAAC,GAAG,CAAGoD,IAAI,CAACC,GAAG,CAAC,CAAC,CAAEjB,OAAO,CAAC,CAAC,CACzC,CAAC,IAAM,CACL;AACA,KAAM,CAAAkB,IAAI,CAAG,KAAM,CAAAjB,GAAG,CAACiB,IAAI,CAAC,CAAC,CAC7BxB,OAAO,CAACC,KAAK,CAAC,oBAAoB,CAAEM,GAAG,CAACa,MAAM,CAAEI,IAAI,CAAC,CACrD,MACF,CACF,CAAE,MAAOC,GAAG,CAAE,CACZ,GAAI,CAAAA,GAAG,SAAHA,GAAG,iBAAHA,GAAG,CAAEC,IAAI,IAAK,YAAY,CAAE,MAAO;AACvC;AACA,KAAM,CAAAxD,KAAK,CAAC,GAAG,CAAGoD,IAAI,CAACC,GAAG,CAAC,CAAC,CAAEjB,OAAO,CAAC,CAAC,CACzC,CACAA,OAAO,EAAI,CAAC,CACd,CAEA,GAAIlB,SAAS,CAAED,UAAU,CAAC,KAAK,CAAC,CAClC,CAAC,CAEDe,mBAAmB,CAAC,CAAC,CAErB,MAAO,IAAM,CACXd,SAAS,CAAG,KAAK,CACjBC,KAAK,CAACA,KAAK,CAAC,CAAC,CACf,CAAC,CACD;AACA;AACF,CAAC,CAAE,CAACb,MAAM,CAAEC,UAAU,CAAEK,QAAQ,CAAEC,UAAU,CAAEF,QAAQ,CAAC,CAAC,CAExD,MAAO,CAAEG,KAAK,CAAEE,OAAQ,CAAC,CAC3B,CAAC,CAED,cAAe,CAAAX,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}