{"ast":null,"code":"/*! @azure/msal-browser v4.24.1 2025-09-30 */\n'use strict';\n\nimport { invoke, PerformanceEvents, invokeAsync } from '@azure/msal-common/browser';\nimport { generateHKDF, createNewGuid, generateBaseKey, decrypt, encrypt } from '../crypto/BrowserCrypto.mjs';\nimport { base64DecToArr } from '../encode/Base64Decode.mjs';\nimport { urlEncodeArr } from '../encode/Base64Encode.mjs';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { createBrowserConfigurationAuthError } from '../error/BrowserConfigurationAuthError.mjs';\nimport { CookieStorage, SameSiteOptions } from './CookieStorage.mjs';\nimport { MemoryStorage } from './MemoryStorage.mjs';\nimport { getAccountKeys, getTokenKeys } from './CacheHelpers.mjs';\nimport { PREFIX, getAccountKeysCacheKey, getTokenKeysCacheKey } from './CacheKeys.mjs';\nimport { isEncrypted } from './EncryptedData.mjs';\nimport { storageNotSupported } from '../error/BrowserConfigurationAuthErrorCodes.mjs';\nimport { uninitializedPublicClientApplication } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst ENCRYPTION_KEY = \"msal.cache.encryption\";\nconst BROADCAST_CHANNEL_NAME = \"msal.broadcast.cache\";\nclass LocalStorage {\n  constructor(clientId, logger, performanceClient) {\n    if (!window.localStorage) {\n      throw createBrowserConfigurationAuthError(storageNotSupported);\n    }\n    this.memoryStorage = new MemoryStorage();\n    this.initialized = false;\n    this.clientId = clientId;\n    this.logger = logger;\n    this.performanceClient = performanceClient;\n    this.broadcast = new BroadcastChannel(BROADCAST_CHANNEL_NAME);\n  }\n  async initialize(correlationId) {\n    const cookies = new CookieStorage();\n    const cookieString = cookies.getItem(ENCRYPTION_KEY);\n    let parsedCookie = {\n      key: \"\",\n      id: \"\"\n    };\n    if (cookieString) {\n      try {\n        parsedCookie = JSON.parse(cookieString);\n      } catch (e) {}\n    }\n    if (parsedCookie.key && parsedCookie.id) {\n      // Encryption key already exists, import\n      const baseKey = invoke(base64DecToArr, PerformanceEvents.Base64Decode, this.logger, this.performanceClient, correlationId)(parsedCookie.key);\n      this.encryptionCookie = {\n        id: parsedCookie.id,\n        key: await invokeAsync(generateHKDF, PerformanceEvents.GenerateHKDF, this.logger, this.performanceClient, correlationId)(baseKey)\n      };\n    } else {\n      // Encryption key doesn't exist or is invalid, generate a new one\n      const id = createNewGuid();\n      const baseKey = await invokeAsync(generateBaseKey, PerformanceEvents.GenerateBaseKey, this.logger, this.performanceClient, correlationId)();\n      const keyStr = invoke(urlEncodeArr, PerformanceEvents.UrlEncodeArr, this.logger, this.performanceClient, correlationId)(new Uint8Array(baseKey));\n      this.encryptionCookie = {\n        id: id,\n        key: await invokeAsync(generateHKDF, PerformanceEvents.GenerateHKDF, this.logger, this.performanceClient, correlationId)(baseKey)\n      };\n      const cookieData = {\n        id: id,\n        key: keyStr\n      };\n      cookies.setItem(ENCRYPTION_KEY, JSON.stringify(cookieData), 0,\n      // Expiration - 0 means cookie will be cleared at the end of the browser session\n      true,\n      // Secure flag\n      SameSiteOptions.None // SameSite must be None to support iframed apps\n      );\n    }\n    await invokeAsync(this.importExistingCache.bind(this), PerformanceEvents.ImportExistingCache, this.logger, this.performanceClient, correlationId)(correlationId);\n    // Register listener for cache updates in other tabs\n    this.broadcast.addEventListener(\"message\", this.updateCache.bind(this));\n    this.initialized = true;\n  }\n  getItem(key) {\n    return window.localStorage.getItem(key);\n  }\n  getUserData(key) {\n    if (!this.initialized) {\n      throw createBrowserAuthError(uninitializedPublicClientApplication);\n    }\n    return this.memoryStorage.getItem(key);\n  }\n  async decryptData(key, data, correlationId) {\n    if (!this.initialized || !this.encryptionCookie) {\n      throw createBrowserAuthError(uninitializedPublicClientApplication);\n    }\n    if (data.id !== this.encryptionCookie.id) {\n      // Data was encrypted with a different key. It must be removed because it is from a previous session.\n      this.performanceClient.incrementFields({\n        encryptedCacheExpiredCount: 1\n      }, correlationId);\n      return null;\n    }\n    const decryptedData = await invokeAsync(decrypt, PerformanceEvents.Decrypt, this.logger, this.performanceClient, correlationId)(this.encryptionCookie.key, data.nonce, this.getContext(key), data.data);\n    if (!decryptedData) {\n      return null;\n    }\n    try {\n      return JSON.parse(decryptedData);\n    } catch (e) {\n      this.performanceClient.incrementFields({\n        encryptedCacheCorruptionCount: 1\n      }, correlationId);\n      return null;\n    }\n  }\n  setItem(key, value) {\n    window.localStorage.setItem(key, value);\n  }\n  async setUserData(key, value, correlationId, timestamp) {\n    if (!this.initialized || !this.encryptionCookie) {\n      throw createBrowserAuthError(uninitializedPublicClientApplication);\n    }\n    const {\n      data,\n      nonce\n    } = await invokeAsync(encrypt, PerformanceEvents.Encrypt, this.logger, this.performanceClient, correlationId)(this.encryptionCookie.key, value, this.getContext(key));\n    const encryptedData = {\n      id: this.encryptionCookie.id,\n      nonce: nonce,\n      data: data,\n      lastUpdatedAt: timestamp\n    };\n    this.memoryStorage.setItem(key, value);\n    this.setItem(key, JSON.stringify(encryptedData));\n    // Notify other frames to update their in-memory cache\n    this.broadcast.postMessage({\n      key: key,\n      value: value,\n      context: this.getContext(key)\n    });\n  }\n  removeItem(key) {\n    if (this.memoryStorage.containsKey(key)) {\n      this.memoryStorage.removeItem(key);\n      this.broadcast.postMessage({\n        key: key,\n        value: null,\n        context: this.getContext(key)\n      });\n    }\n    window.localStorage.removeItem(key);\n  }\n  getKeys() {\n    return Object.keys(window.localStorage);\n  }\n  containsKey(key) {\n    return window.localStorage.hasOwnProperty(key);\n  }\n  /**\r\n   * Removes all known MSAL keys from the cache\r\n   */\n  clear() {\n    // Removes all remaining MSAL cache items\n    this.memoryStorage.clear();\n    const accountKeys = getAccountKeys(this);\n    accountKeys.forEach(key => this.removeItem(key));\n    const tokenKeys = getTokenKeys(this.clientId, this);\n    tokenKeys.idToken.forEach(key => this.removeItem(key));\n    tokenKeys.accessToken.forEach(key => this.removeItem(key));\n    tokenKeys.refreshToken.forEach(key => this.removeItem(key));\n    // Clean up anything left\n    this.getKeys().forEach(cacheKey => {\n      if (cacheKey.startsWith(PREFIX) || cacheKey.indexOf(this.clientId) !== -1) {\n        this.removeItem(cacheKey);\n      }\n    });\n  }\n  /**\r\n   * Helper to decrypt all known MSAL keys in localStorage and save them to inMemory storage\r\n   * @returns\r\n   */\n  async importExistingCache(correlationId) {\n    if (!this.encryptionCookie) {\n      return;\n    }\n    let accountKeys = getAccountKeys(this);\n    accountKeys = await this.importArray(accountKeys, correlationId);\n    // Write valid account keys back to map\n    if (accountKeys.length) {\n      this.setItem(getAccountKeysCacheKey(), JSON.stringify(accountKeys));\n    } else {\n      this.removeItem(getAccountKeysCacheKey());\n    }\n    const tokenKeys = getTokenKeys(this.clientId, this);\n    tokenKeys.idToken = await this.importArray(tokenKeys.idToken, correlationId);\n    tokenKeys.accessToken = await this.importArray(tokenKeys.accessToken, correlationId);\n    tokenKeys.refreshToken = await this.importArray(tokenKeys.refreshToken, correlationId);\n    // Write valid token keys back to map\n    if (tokenKeys.idToken.length || tokenKeys.accessToken.length || tokenKeys.refreshToken.length) {\n      this.setItem(getTokenKeysCacheKey(this.clientId), JSON.stringify(tokenKeys));\n    } else {\n      this.removeItem(getTokenKeysCacheKey(this.clientId));\n    }\n  }\n  /**\r\n   * Helper to decrypt and save cache entries\r\n   * @param key\r\n   * @returns\r\n   */\n  async getItemFromEncryptedCache(key, correlationId) {\n    if (!this.encryptionCookie) {\n      return null;\n    }\n    const rawCache = this.getItem(key);\n    if (!rawCache) {\n      return null;\n    }\n    let encObj;\n    try {\n      encObj = JSON.parse(rawCache);\n    } catch (e) {\n      // Not a valid encrypted object, remove\n      return null;\n    }\n    if (!isEncrypted(encObj)) {\n      // Data is not encrypted\n      this.performanceClient.incrementFields({\n        unencryptedCacheCount: 1\n      }, correlationId);\n      return encObj;\n    }\n    if (encObj.id !== this.encryptionCookie.id) {\n      // Data was encrypted with a different key. It must be removed because it is from a previous session.\n      this.performanceClient.incrementFields({\n        encryptedCacheExpiredCount: 1\n      }, correlationId);\n      return null;\n    }\n    return invokeAsync(decrypt, PerformanceEvents.Decrypt, this.logger, this.performanceClient, correlationId)(this.encryptionCookie.key, encObj.nonce, this.getContext(key), encObj.data);\n  }\n  /**\r\n   * Helper to decrypt and save an array of cache keys\r\n   * @param arr\r\n   * @returns Array of keys successfully imported\r\n   */\n  async importArray(arr, correlationId) {\n    const importedArr = [];\n    const promiseArr = [];\n    arr.forEach(key => {\n      const promise = this.getItemFromEncryptedCache(key, correlationId).then(value => {\n        if (value) {\n          this.memoryStorage.setItem(key, value);\n          importedArr.push(key);\n        } else {\n          // If value is empty, unencrypted or expired remove\n          this.removeItem(key);\n        }\n      });\n      promiseArr.push(promise);\n    });\n    await Promise.all(promiseArr);\n    return importedArr;\n  }\n  /**\r\n   * Gets encryption context for a given cache entry. This is clientId for app specific entries, empty string for shared entries\r\n   * @param key\r\n   * @returns\r\n   */\n  getContext(key) {\n    let context = \"\";\n    if (key.includes(this.clientId)) {\n      context = this.clientId; // Used to bind encryption key to this appId\n    }\n    return context;\n  }\n  updateCache(event) {\n    this.logger.trace(\"Updating internal cache from broadcast event\");\n    const perfMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.LocalStorageUpdated);\n    perfMeasurement.add({\n      isBackground: true\n    });\n    const {\n      key,\n      value,\n      context\n    } = event.data;\n    if (!key) {\n      this.logger.error(\"Broadcast event missing key\");\n      perfMeasurement.end({\n        success: false,\n        errorCode: \"noKey\"\n      });\n      return;\n    }\n    if (context && context !== this.clientId) {\n      this.logger.trace(`Ignoring broadcast event from clientId: ${context}`);\n      perfMeasurement.end({\n        success: false,\n        errorCode: \"contextMismatch\"\n      });\n      return;\n    }\n    if (!value) {\n      this.memoryStorage.removeItem(key);\n      this.logger.verbose(\"Removed item from internal cache\");\n    } else {\n      this.memoryStorage.setItem(key, value);\n      this.logger.verbose(\"Updated item in internal cache\");\n    }\n    perfMeasurement.end({\n      success: true\n    });\n  }\n}\nexport { LocalStorage };","map":{"version":3,"names":["ENCRYPTION_KEY","BROADCAST_CHANNEL_NAME","LocalStorage","constructor","clientId","logger","performanceClient","window","localStorage","createBrowserConfigurationAuthError","storageNotSupported","memoryStorage","MemoryStorage","initialized","broadcast","BroadcastChannel","initialize","correlationId","cookies","CookieStorage","cookieString","getItem","parsedCookie","key","id","JSON","parse","e","baseKey","invoke","base64DecToArr","PerformanceEvents","Base64Decode","encryptionCookie","invokeAsync","generateHKDF","GenerateHKDF","createNewGuid","generateBaseKey","GenerateBaseKey","keyStr","urlEncodeArr","UrlEncodeArr","Uint8Array","cookieData","setItem","stringify","SameSiteOptions","None","importExistingCache","bind","ImportExistingCache","addEventListener","updateCache","getUserData","createBrowserAuthError","uninitializedPublicClientApplication","decryptData","data","incrementFields","encryptedCacheExpiredCount","decryptedData","decrypt","Decrypt","nonce","getContext","encryptedCacheCorruptionCount","value","setUserData","timestamp","encrypt","Encrypt","encryptedData","lastUpdatedAt","postMessage","context","removeItem","containsKey","getKeys","Object","keys","hasOwnProperty","clear","accountKeys","getAccountKeys","forEach","tokenKeys","getTokenKeys","idToken","accessToken","refreshToken","cacheKey","startsWith","PREFIX","indexOf","importArray","length","getAccountKeysCacheKey","getTokenKeysCacheKey","getItemFromEncryptedCache","rawCache","encObj","isEncrypted","unencryptedCacheCount","arr","importedArr","promiseArr","promise","then","push","Promise","all","includes","event","trace","perfMeasurement","startMeasurement","LocalStorageUpdated","add","isBackground","error","end","success","errorCode","verbose"],"sources":["../../src/cache/LocalStorage.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}